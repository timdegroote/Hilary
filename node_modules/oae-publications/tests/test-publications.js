/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var Cassandra = require('oae-util/lib/cassandra');
var fs = require('fs');
var util = require('util');

var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationDAO = require('oae-authentication/lib/internal/dao');
var AuthzUtil = require('oae-authz/lib/util');
var ContentAPI = require('oae-content');
var LoginId = require('oae-authentication/lib/model').LoginId;
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

var Publication = require('oae-publications/lib/model').Publication;
var PublicationsAPI = require('oae-publications');
var PublicationsConstants = require('oae-publications/lib/constants').PublicationsConstants;
var PublicationsRestAPI = require('../lib/test/util');

describe('Publications', function() {

    var app = null;
    var server = null;
    var port = null;
    var users = {};

    var camAnonymousRestCtx = null;
    var gtAdminRestCtx = null;
    var camAdminRestCtx = null;
    var globalAdminRestCtx = null;
    var simongRestContext = null;

    ///////////////////////
    //  UTILITY METHODS  //
    ///////////////////////

    /**
     * Creates a test user and `nrOfPublications` publications for that user.
     *
     * @param  {Number}             nrOfPublications            Number of publications that should be created
     * @param  {Function}           callback                    Standard callback method
     * @param  {Object}             callback.user               The created user
     * @param  {Publication[]}      callback.publications       A set of publications that have been created, these will be sorted descending on their publication date
     */
    var createUserWithPublications = function(nrOfPublications, callback) {
        TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, createdUser) {
            assert.ok(!err);

            var publications = [];

            /*!
             * Can be used to sort an array of publications
             */
            var sortByDate = function(a, b) {
                return b.date - a.date;
            };

            /*!
             * After all the publications have been created
             */
            var _finishCreatingPublications = function() {
                return callback(createdUser, publications);
            };

            /*!
             * Create a new publication and link it with our test user
             */
            var _createPublications = function() {
                if (nrOfPublications === 0) {
                    return _finishCreatingPublications();
                }

                var yearInMilliSeconds = 365 * 24 * 60 * 60 * 1000;
                var publishedDate = 1000000000000 + (Math.floor(Math.random() * yearInMilliSeconds) - yearInMilliSeconds/2);
                var publication = generatePublicationData({'createdBy': createdUser.user.id, 'date': publishedDate, 'authors': [createdUser.user.displayName]});
                PublicationsAPI.createPublication('camtest', [ generateRandomSourceId() ], publication, function(err, data) {
                    assert.ok(!err);
                    publications.push(publication);
                    publications = publications.sort(sortByDate);

                    PublicationsRestAPI.linkPublicationToUser(camAdminRestCtx, publication.id, createdUser.user.displayName, createdUser.user.id, function(err) {
                        assert.ok(!err);
                        nrOfPublications--;
                        return _createPublications();
                    });
                });
            };

            _createPublications();
        });
    };

    /**
     * Utility method that returns some random publication data
     *
     * @param  {Object}         opts        Object containing publication parameters
     * @return {Publication}                Object representing a publication
     */
    var generatePublicationData = function(opts) {
        return _.extend(Publication(null, 'camtest', null, null, TestsUtil.generateRandomText(), _.sample(PublicationsConstants.publicationTypes), Date.now(), null, [TestsUtil.generateRandomText(), TestsUtil.generateRandomText()], TestsUtil.generateRandomText(), {
            'openAccessType': _.sample(['gold', 'green']),
            'journalName': TestsUtil.generateRandomText(),
            'issueNumber': String(_.random(0, 1000)),
            'pageBegin': String(_.random(0, 1000)),
            'pageEnd': String(_.random(0, 1000)),
            'funders': _.sample([[TestsUtil.generateRandomText(), TestsUtil.generateRandomText()], null]),
            'institution': TestsUtil.generateRandomText(),
            'department': TestsUtil.generateRandomText(),
            'contactEmail': TestsUtil.generateTestEmailAddress(),
            'useCambridgeAddendum': String(_.sample([true, false])),
            'comments': TestsUtil.generateRandomText(),
            'acceptanceDate': _.sample([_.random(0, 2000000000000), null])
        }), opts);
    };

    var createPublicationWithOptions = function(opts, callback) {
        createPublication(generatePublicationData(opts), callback);
    };

    var createPublication = function(publication, callback) {
        callback = callback || publication;
        publication = _.isFunction(publication) ? generatePublicationData() : publication;
        PublicationsAPI.createPublication('camtest', [generateRandomSourceId()], publication, callback);
    };

    /**
     * Generates a random source Id
     *
     * @return {String} A random string that can be used as a source id
     */
    var generateRandomSourceId = function() {
        return 'mendeley#' + TestsUtil.generateRandomText();
    };

    /**
     * Utility method that returns a stream that points to a PDF
     *
     * @return {Stream}     A stream that points to a PDF that can be uploaded
     */
    var getFileStream = function() {
        var file = __dirname + '/data/paper.pdf';
        return fs.createReadStream(file);
    };

    /**
     * Utility method that checks if 2 publications are equal
     *
     * @param  {Object}         createdPublication      The created publication
     * @param  {Publication}    returnedPublication     The returned publication
     */
    var isCorrespondingPublication = function(createdPublication, returnedPublication) {
        assert.ok(createdPublication);
        assert.ok(returnedPublication);
        createdPublication = _.clone(createdPublication);
        delete createdPublication.id;
        delete createdPublication.profilePath;
        _.each(_.keys(createdPublication), function(key) {
            if (!_.isArray()) {
                assert.strictEqual(createdPublication[key], returnedPublication[key]);
            } else {
                assert.strictEqual(createdPublication[key].length, returnedPublication[key].length);
            }
        });
    };

    ////////////////////////
    //  PRE-TEST METHODS  //
    ////////////////////////

    /*!
     * Set up a web server that mocks Symplectic responses, cleans out the publications and creates users that can be used
     * to ingest data for.
     */
    before(function(callback) {
        camAnonymousRestCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestCtx = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        camAdminRestCtx = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        globalAdminRestCtx = TestsUtil.createGlobalAdminRestContext();

        TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, simong) {
            assert.ok(!err);
            assert.ok(simong);
            simongRestContext = simong.restContext;
            return callback();
        });
    });

    /////////////
    //  TESTS  //
    /////////////

    describe('#createPublication()', function() {

        describe('verify parameters', function() {

            describe('verify sourceIds', function() {

                /**
                 * Test that verifies that valid sourceIds have been specified
                 */
                it('verify that valid sourceIds have been specified', function(callback) {

                    // Create a new publication by passing in a null object
                    PublicationsAPI.createPublication('camtest', null, null, function(err, data) {
                        assert.strictEqual(err.code, 400);

                        // Create a new publication by passing in an object
                        PublicationsAPI.createPublication('camtest', {}, null, function(err, data) {
                            assert.strictEqual(err.code, 400);

                            // Create a new publication by passing in an empty array of source id's
                            PublicationsAPI.createPublication('camtest', [], null, function(err, data) {
                                assert.strictEqual(err.code, 400);
                                return callback();
                            });
                        });
                    });
                });
            });

            describe('verify publication', function() {

                /**
                 * Test that verifies that a valid publication has been specified
                 */
                it('verify that a valid publication has been specified', function(callback) {

                    // Passing in an in empty publications object should throw an error
                    PublicationsAPI.createPublication('camtest', [generateRandomSourceId()], null, function(err, data) {
                        assert.strictEqual(err.code, 400);

                        // Passing in an invalid publications object should throw an error
                        PublicationsAPI.createPublication('camtest', [generateRandomSourceId()], 'invalid_format', function(err, data) {
                            assert.strictEqual(err.code, 400);

                            // Passing in an invalid publications object should throw an error
                            PublicationsAPI.createPublication('camtest', [generateRandomSourceId()], [], function(err, data) {
                                assert.strictEqual(err.code, 400);

                                // Passing in an empty publications object should throw an error
                                PublicationsAPI.createPublication('camtest', [generateRandomSourceId()], {}, function(err, data) {
                                    assert.strictEqual(err.code, 400);
                                    return callback();
                                });
                            });
                        });
                    });
                });

                it('verify that a valid displayName has been entered', function(callback) {
                    createPublicationWithOptions({
                        'displayName': null
                    }, function(err, data) {
                        assert.strictEqual(err.code, 400);

                        createPublicationWithOptions({
                            'displayName': ''
                        }, function(err, data) {
                            assert.strictEqual(err.code, 400);
                            return callback();
                        });
                    });
                });

                it('verify that a valid set of authors have been entered', function(callback) {
                    createPublicationWithOptions({
                        'authors': null
                    }, function(err, data) {
                        assert.strictEqual(err.code, 400);

                        createPublicationWithOptions({
                            'authors': {}
                        }, function(err, data) {
                            assert.strictEqual(err.code, 400);

                            createPublicationWithOptions({
                                'authors': []
                            }, function(err, data) {
                                assert.strictEqual(err.code, 400);
                                return callback();
                            });
                        });
                    });
                });

                it('verify that a valid journalName has been entered', function(callback) {
                    createPublicationWithOptions({
                        'journalName': null
                    }, function(err, data) {
                        assert.strictEqual(err.code, 400);
                        return callback();
                    });
                });

                it('verify that a valid publisher has been entered', function(callback) {
                    createPublicationWithOptions({
                        'publisher': null
                    }, function(err, data) {
                        assert.strictEqual(err.code, 400);
                        return callback();
                    });
                });

                it('verify that a valid acceptanceDate has been entered', function(callback) {
                    createPublicationWithOptions({
                        'acceptanceDate': 'invalid_format'
                    }, function(err, data) {
                        assert.strictEqual(err.code, 400);
                        return callback();
                    });
                });

                it('verify that a valid date has been entered', function(callback) {
                    createPublicationWithOptions({
                        'date': 'invalid_format'
                    }, function(err, data) {
                        assert.strictEqual(err.code, 400);
                        return callback();
                    });
                });

                it('verify that a valid contactEmail has been entered', function(callback) {
                    createPublicationWithOptions({
                        'contactEmail': null
                    }, function(err, data) {
                        assert.strictEqual(err.code, 400);

                        createPublicationWithOptions({
                            'contactEmail': 'invalid_format'
                        }, function(err, data) {
                            assert.strictEqual(err.code, 400);
                            return callback();
                        });
                    });
                });

                it('verify that a valid publicationType has been entered', function(callback) {
                    createPublicationWithOptions({
                        'publicationType': null
                    }, function(err, data) {
                        assert.strictEqual(err.code, 400);
                        return callback();
                    });
                });

                it('verify that a valid value for useCambridgeAddendum has been entered', function(callback) {
                    createPublicationWithOptions({
                        'useCambridgeAddendum': null
                    }, function(err, data) {
                        assert.strictEqual(err.code, 400);
                        return callback();
                    });
                });

                it('verify that providing a value for underEmbargo results in an error', function(callback) {
                    createPublicationWithOptions({
                        'underEmbargo': false
                    }, function(err, data) {
                        assert.strictEqual(err.code, 400);

                        createPublicationWithOptions({
                            'underEmbargo': 'a value'
                        }, function(err, data) {
                            assert.strictEqual(err.code, 400);
                            return callback();
                        });
                    });
                });

                it('verify that providing a value for embargoDate results in an error', function(callback) {
                    createPublicationWithOptions({
                        'embargoDate': Date.now()
                    }, function(err, data) {
                        assert.strictEqual(err.code, 400);

                        createPublicationWithOptions({
                            'embargoDate': false
                        }, function(err, data) {
                            assert.strictEqual(err.code, 400);
                            return callback();
                        });
                    });
                });
            });
        });

        describe('creating publications', function() {

            /**
             * Test that verifies that creating a publication is successful
             */
            it('verify that creating a publication is successful', function(callback) {
                createPublication(function(err, createdPublication) {
                    assert.ok(!err);
                    return callback();
                });
            });

            /**
             * Test that verifies that the extra parameters are persisted correctly
             */
            it('verify that the extra parameters are persisted correctly', function(callback) {
                var publication = generatePublicationData();
                createPublication(publication, function(err, createdPublication) {
                    assert.ok(!err);
                    isCorrespondingPublication(createdPublication, publication);
                    return callback();
                });
            });

            it('verify that underEmbargo is always set to true for new publications', function(callback) {
                createPublication(function(err, createdPublication) {
                    assert.ok(!err);
                    assert.strictEqual(createdPublication.underEmbargo, true);
                    return callback();
                });
            });

            it('verify that the embargo date is always set to null for new publications', function(callback) {
                createPublication(function(err, createdPublication) {
                    assert.ok(!err);
                    assert.strictEqual(createdPublication.embargoDate, null);
                    return callback();
                });
            });

            /**
             * Test that verifies that if you ingest a publication with a source that's already in the system, it will not result in another record but the source will simply be added to the list of sources for that publication
             */
            it('verify ingesting a publication with an already seen source results in an update', function(callback) {
                var ids = [ generateRandomSourceId(), generateRandomSourceId(), generateRandomSourceId() ];
                var sourceIdsA = [ids[0], ids[1]];
                var sourceIdsB = [ids[1], ids[2]];

                // Create a first publication
                var publication = generatePublicationData({
                    'displayName': 'displayName A',
                    'authors': ['Author from A']
                });

                PublicationsAPI.createPublication('camtest', sourceIdsA, publication, function(err, publicationA, result) {
                    assert.ok(!err);
                    assert.ok(publicationA);
                    assert.strictEqual(result, PublicationsConstants.ingestionResult.CREATED);

                    // Because we have the same source as a source from A, we'll "update" the publication record
                    publication = generatePublicationData({
                        'displayName': 'displayName B'
                    });

                    PublicationsAPI.createPublication('camtest', sourceIdsA, publication, function(err, publicationB, result) {
                        assert.ok(!err);
                        assert.ok(publicationB);
                        assert.strictEqual(result, PublicationsConstants.ingestionResult.UPDATED);
                        assert.strictEqual(publicationA.id, publicationB.id);

                        // Get the full publication
                        PublicationsRestAPI.getPublication(camAdminRestCtx, publicationA.id, function(err, publication) {
                            assert.ok(!err);
                            assert.ok(publication);

                            // Verify only one author returns
                            assert.strictEqual(publication.displayName, 'displayName B');
                            assert.strictEqual(publication.authors.length, 1);
                            assert.strictEqual(publication.authors[0], 'Author from A');
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('#getPublication', function() {

        describe('verify parameters', function() {

            /**
             * Test that verifies that the parameters are validated
             */
            it('verify parameter validation', function(callback) {
                createUserWithPublications(1, function(simong, createdPublications) {

                    // Malformed user ID
                    PublicationsRestAPI.getPublication(simong.restContext, 'Not a publication ID', function(err, data) {
                        assert.strictEqual(err.code, 400);

                        // Sanity check
                        PublicationsRestAPI.getPublication(simong.restContext, createdPublications[0].id, function(err, publication) {
                            assert.ok(!err);
                            assert.strictEqual(publication.date, createdPublications[0].date);
                            assert.strictEqual(publication.displayName, createdPublications[0].displayName);
                            assert.strictEqual(publication.publicationType, createdPublications[0].publicationType);
                            assert.strictEqual(publication.publisher, createdPublications[0].publisher);
                            return callback();
                        });
                    });
                });
            });
        });

        describe('verify linked content', function() {

            /**
             * Test that verifies that creating a publication without content item doesn't contain a content profile
             */
            it('verify that creating a publication without a content item doesn\'t contain a content profile', function(callback) {
                createUserWithPublications(1, function(simong, publications) {
                    assert.ok(publications);
                    assert.strictEqual(publications.length, 1);

                    // Request the created publication
                    PublicationsRestAPI.getPublication(camAdminRestCtx, publications[0].id, function(err, publication) {
                        assert.ok(!err);
                        assert.ok(!publication.linkedContent);
                        return callback();
                    });
                });
            });

            /**
             * Test that verifies that the content profile has been added to the publication
             */
            it('verify that the content profile is added to the publication profile', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, coenegoUser) {
                    assert.ok(!err);

                    // Create a new content item
                    RestAPI.Content.createFile(coenegoUser.restContext, 'paper.pdf', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        var publication = generatePublicationData({
                            'createdBy': coenegoUser.user.id,
                            'displayName': 'paper.pdf',
                            'linkedContentId': content.id
                        });

                        PublicationsAPI.createPublication('camtest', [ generateRandomSourceId() ], publication, function(err, publication, result) {
                            assert.ok(!err);

                            // Request the created publication
                            PublicationsRestAPI.getPublication(camAdminRestCtx, publication.id, function(err, data) {
                                assert.ok(!err);
                                assert.ok(data);
                                assert.strictEqual(data.id, publication.id);
                                assert.strictEqual(data.displayName, publication.displayName);
                                assert.strictEqual(data.publicationType, publication.publicationType);
                                assert.strictEqual(data.date, publication.date);
                                assert.ok(data.linkedContent);
                                assert.strictEqual(data.linkedContent.id, publication.linkedContentId);
                                assert.strictEqual(data.linkedContent.displayName, publication.displayName);
                                assert.strictEqual(data.linkedContent.createdBy, coenegoUser.user.id);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        describe('verify permission parameters', function() {

            /**
             * Test that verifies that the correct permission parameters are returned for anonymous users
             */
            it('verify permission parameters', function(callback) {
                createUserWithPublications(1, function(coenego, createdPublications) {
                    var createdPublication = createdPublications[0];

                    // Verify the parameters for an anonymous user
                    PublicationsRestAPI.getPublication(camAnonymousRestCtx, createdPublication.id, function(err, publication) {
                        assert.ok(!err);
                        assert.strictEqual(publication.permissions.isAdmin, false);
                        assert.strictEqual(publication.permissions.isGlobalAdmin, false);
                        assert.strictEqual(publication.permissions.isSubmitter, false);
                        assert.strictEqual(publication.permissions.isAuthor, false);

                        // Verify the parameters for a non-affiliated user
                        PublicationsRestAPI.getPublication(simongRestContext, createdPublication.id, function(err, publication) {
                            assert.ok(!err);
                            assert.strictEqual(publication.permissions.isAdmin, false);
                            assert.strictEqual(publication.permissions.isGlobalAdmin, false);
                            assert.strictEqual(publication.permissions.isSubmitter, false);
                            assert.strictEqual(publication.permissions.isAuthor, false);

                            // Verify the parameters for the submitter/author of the publication
                            PublicationsRestAPI.getPublication(coenego.restContext, createdPublication.id, function(err, publication) {
                                assert.ok(!err);
                                assert.strictEqual(publication.permissions.isAdmin, false);
                                assert.strictEqual(publication.permissions.isGlobalAdmin, false);
                                assert.strictEqual(publication.permissions.isSubmitter, true);
                                assert.strictEqual(publication.permissions.isAuthor, true);

                                // Verify the parameters for the submitter/author of the publication
                                PublicationsRestAPI.getPublication(camAdminRestCtx, createdPublication.id, function(err, publication) {
                                    assert.ok(!err);
                                    assert.strictEqual(publication.permissions.isAdmin, true);
                                    assert.strictEqual(publication.permissions.isGlobalAdmin, false);
                                    assert.strictEqual(publication.permissions.isSubmitter, false);
                                    assert.strictEqual(publication.permissions.isAuthor, false);

                                    // Verify the parameters for the submitter/author of the publication
                                    RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', null, function(err, ctx) {
                                        assert.ok(!err);
                                        PublicationsRestAPI.getPublication(ctx, createdPublication.id, function(err, publication) {
                                            assert.ok(!err);
                                            assert.strictEqual(publication.permissions.isAdmin, true);
                                            assert.strictEqual(publication.permissions.isGlobalAdmin, true);
                                            assert.strictEqual(publication.permissions.isSubmitter, false);
                                            assert.strictEqual(publication.permissions.isAuthor, false);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('verify embargo', function() {

            /**
             * Test that verifies that content items can be viewed when publications are not under embargo
             */
            it('verify that the content item can be viewed of publications that are not under embargo', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 3, function(err, users, coenegoUser, halUser, timUser) {
                    assert.ok(!err);

                    // Create a new content item
                    RestAPI.Content.createFile(coenegoUser.restContext, 'paper.pdf', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new publication
                        var publication = generatePublicationData({
                            'authors': [timUser.user.id],
                            'createdBy': coenegoUser.user.id,
                            'linkedContentId': content.id
                        });

                        PublicationsAPI.createPublication('camtest', [ generateRandomSourceId() ], publication, function(err, publication, result) {
                            assert.ok(!err);
                            assert.ok(publication);

                            PublicationsAPI.updatePublication(coenegoUser.restContext, publication.id, {
                                'underEmbargo': false
                            }, function(err, publication) {
                                assert.ok(!error);
                                assert.ok(publication);

                                // Anonymous users are not allowed to see the content item when the publication is under embargo
                                PublicationsRestAPI.getPublication(camAnonymousRestCtx, publication.id, function(err, data) {
                                    assert.ok(!err);
                                    assert.ok(data);
                                    assert.ok(data.linkedContent);

                                    // Regular users are not allowed to see the content item when the publication is under embargo
                                    PublicationsRestAPI.getPublication(halUser.restContext, publication.id, function(err, data) {
                                        assert.ok(!err);
                                        assert.ok(data);
                                        assert.ok(data.linkedContent);

                                        // Authors are always allowed to see the content item when the publication is under embargo
                                        PublicationsRestAPI.getPublication(timUser.restContext, publication.id, function(err, data) {
                                            assert.ok(!err);
                                            assert.ok(data);
                                            assert.ok(data.linkedContent);

                                            // Submitters are always allowed to see the content item when the publication is under embargo
                                            PublicationsRestAPI.getPublication(coenegoUser.restContext, publication.id, function(err, data) {
                                                assert.ok(!err);
                                                assert.ok(data);
                                                assert.ok(data.linkedContent);

                                                // Tenant admins are always allowed to see the content item when the publication is under embargo
                                                PublicationsRestAPI.getPublication(camAdminRestCtx, publication.id, function(err, data) {
                                                    assert.ok(!err);
                                                    assert.ok(data);
                                                    assert.ok(data.linkedContent);

                                                    // Global admins are always allowed to see the content item when the publication is under embargo
                                                    RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', null, function(err, ctx) {
                                                        assert.ok(!err);
                                                        PublicationsRestAPI.getPublication(ctx, publication.id, function(err, data) {
                                                            assert.ok(!err);
                                                            assert.ok(data);
                                                            assert.ok(data.linkedContent);
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that only authorized users can view content items of publications when under embargo
             */
            it('verify that only authorized users can view content items of publications that are under embargo', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 3, function(err, users, coenegoUser, halUser, timUser) {
                    assert.ok(!err);

                    // Create a new content item
                    RestAPI.Content.createFile(coenegoUser.restContext, 'paper.pdf', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new publication
                        var publication = generatePublicationData({
                            'authors': [timUser.user.id],
                            'createdBy': coenegoUser.user.id,
                            'linkedContentId': content.id,
                        });
                        PublicationsAPI.createPublication('camtest', [ generateRandomSourceId() ], publication, function(err, publication, result) {
                            assert.ok(!err);
                            assert.ok(publication);

                            // Anonymous users are not allowed to see the content item when the publication is under embargo
                            PublicationsRestAPI.getPublication(camAnonymousRestCtx, publication.id, function(err, data) {
                                assert.ok(!err);
                                assert.ok(data);
                                assert.ok(!data.linkedContent);

                                // Regular users are not allowed to see the content item when the publication is under embargo
                                PublicationsRestAPI.getPublication(halUser.restContext, publication.id, function(err, data) {
                                    assert.ok(!err);
                                    assert.ok(data);
                                    assert.ok(!data.linkedContent);

                                    // Authors are always allowed to see the content item when the publication is under embargo
                                    PublicationsRestAPI.getPublication(timUser.restContext, publication.id, function(err, data) {
                                        assert.ok(!err);
                                        assert.ok(data);
                                        assert.ok(data.linkedContent);

                                        // Submitters are always allowed to see the content item when the publication is under embargo
                                        PublicationsRestAPI.getPublication(coenegoUser.restContext, publication.id, function(err, data) {
                                            assert.ok(!err);
                                            assert.ok(data);
                                            assert.ok(data.linkedContent);

                                            // Tenant admins are always allowed to see the content item when the publication is under embargo
                                            PublicationsRestAPI.getPublication(camAdminRestCtx, publication.id, function(err, data) {
                                                assert.ok(!err);
                                                assert.ok(data);
                                                assert.ok(data.linkedContent);

                                                // Global admins are always allowed to see the content item when the publication is under embargo
                                                RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', null, function(err, ctx) {
                                                    assert.ok(!err);
                                                    PublicationsRestAPI.getPublication(ctx, publication.id, function(err, data) {
                                                        assert.ok(!err);
                                                        assert.ok(data);
                                                        assert.ok(data.linkedContent);
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('#getPublicationsByAuthor()', function() {

            /**
             * Test that verifies that the parameters are validated
             */
            it('verify parameter validation', function(callback) {
                createUserWithPublications(30, function(simong, createdPublications) {

                    // Malformed user ID
                    PublicationsRestAPI.getPublicationsByAuthor(simong.restContext, 'not a user id', null, 3, function(err, data) {
                        assert.strictEqual(err.code, 400);

                        // 10 is the default and 25 is the maximum amount of publications that should be returned from the REST api
                        PublicationsRestAPI.getPublicationsByAuthor(simong.restContext, simong.user.id, null, null, function(err, data) {
                            assert.ok(!err);
                            assert.strictEqual(data.results.length, 10);
                            PublicationsRestAPI.getPublicationsByAuthor(simong.restContext, simong.user.id, null, 50, function(err, data) {
                                assert.ok(!err);
                                assert.strictEqual(data.results.length, 25);
                                return callback();
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that the content profile is added to the publication object if a file has been uploaded
             */
            it('verify content profile added to publication', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, coenego) {
                    assert.ok(!err);

                    // Create a new content item
                    RestAPI.Content.createFile(coenego.restContext, 'paper.pdf', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new publication
                        // var authors = ;
                        var publication = generatePublicationData({
                            'authors': ['random user A', coenego.user.id, 'random user B'],
                            'linkedContentId': content.id,
                            'createdBy': coenego.user.id
                        });
                        PublicationsAPI.createPublication('camtest', [ generateRandomSourceId() ], publication, function(err, publication) {
                            assert.ok(!err);
                            assert.ok(publication);

                            // Request the created publication
                            PublicationsRestAPI.getPublicationsByAuthor(coenego.restContext, coenego.user.id, null, 50, function(err, data) {
                                assert.ok(!err);
                                assert.ok(data);
                                assert.ok(data.results);
                                assert.strictEqual(data.results.length, 1);
                                assert.strictEqual(data.results[0].id, publication.id);
                                assert.strictEqual(data.results[0].displayName, publication.displayName);
                                assert.strictEqual(data.results[0].publicationType, publication.publicationType);
                                assert.strictEqual(data.results[0].date, publication.date);
                                assert.ok(data.results[0].linkedContent);
                                assert.strictEqual(data.results[0].linkedContent.id, publication.linkedContentId);
                                assert.strictEqual(data.results[0].linkedContent.createdBy, coenego.user.id);
                                return callback();
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies a user their publications are ordered on the publication date and can be paged
             */
            it('verify ordering and paging', function(callback) {
                createUserWithPublications(8, function(simong, createdPublications) {

                    // Get the first 3 publications
                    PublicationsRestAPI.getPublicationsByAuthor(simong.restContext, simong.user.id, null, 3, function(err, data) {
                        assert.ok(!err);

                        assert.strictEqual(data.results.length, 3);
                        assert.strictEqual(data.results[0].id, createdPublications[0].id);
                        assert.strictEqual(data.results[1].id, createdPublications[1].id);
                        assert.strictEqual(data.results[2].id, createdPublications[2].id);

                        // Get the next 3 publications
                        PublicationsRestAPI.getPublicationsByAuthor(simong.restContext, simong.user.id, data.nextToken, 3, function(err, data) {
                            assert.ok(!err);

                            assert.strictEqual(data.results.length, 3);
                            assert.strictEqual(data.results[0].id, createdPublications[3].id);
                            assert.strictEqual(data.results[1].id, createdPublications[4].id);
                            assert.strictEqual(data.results[2].id, createdPublications[5].id);

                            // Get the last 2 publications
                            PublicationsRestAPI.getPublicationsByAuthor(simong.restContext, simong.user.id, data.nextToken, 3, function(err, data) {
                                assert.ok(!err);

                                assert.strictEqual(data.results.length, 2);
                                assert.strictEqual(data.results[0].id, createdPublications[6].id);
                                assert.strictEqual(data.results[1].id, createdPublications[7].id);
                                return callback();
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that a user is linked to the publication in which he was tagged as an author
             */
            it('verify a user is linked to the publication in which he was tagged as an author', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, coenego) {
                    assert.ok(!err);
                    assert.ok(coenego);

                    var authors = ['random user A', coenego.user.id, 'random user B'];
                    var publication = generatePublicationData({
                        'authors': authors,
                        'createdBy': coenego.user.id
                    });

                    PublicationsAPI.createPublication('camtest', [ generateRandomSourceId() ], publication, function(err, publication, result) {
                        assert.ok(!err);
                        assert.strictEqual(publication.createdBy, coenego.user.id);
                        assert.strictEqual(result, PublicationsConstants.ingestionResult.CREATED);

                        // Check if the coenego user has been linked to the publication
                        PublicationsRestAPI.getPublicationsByAuthor(coenego.restContext, coenego.user.id, null, null, function(err, data) {
                            assert.ok(!err);
                            assert.ok(data);
                            assert.strictEqual(data.results.length, 1);
                            assert.strictEqual(data.results[0].id, publication.id);
                            assert.strictEqual(data.results[0].authors.length, authors.length);
                            assert.strictEqual(data.results[0].createdBy, publication.createdBy);
                            assert.strictEqual(data.results[0].date, publication.date);
                            assert.strictEqual(data.results[0].displayName, publication.displayName);
                            assert.strictEqual(data.results[0].publicationType, publication.publicationType);
                            return callback();
                        });
                    });
                });
            });

            /**
             * Test that verifies that the correct publications are returned when a user is tagged in multiple publications
             */
            it('verify that the correct publications are returned when a user is tagged in multiple publications', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, coenego) {
                    assert.ok(!err);

                    var publication1 = generatePublicationData({
                        'createdBy': coenego.user.id,
                        'displayName': 'displayName A',
                        'authors': [coenego.user.id]
                    });

                    var publication2 = generatePublicationData({
                        'createdBy': coenego.user.id,
                        'displayName': 'displayName B',
                        'authors': [coenego.user.id]
                    });

                    PublicationsAPI.createPublication('camtest', [ generateRandomSourceId() ], publication1, function(err, publication, result) {
                        assert.ok(!err);
                        assert.strictEqual(publication.createdBy, coenego.user.id);
                        assert.strictEqual(result, PublicationsConstants.ingestionResult.CREATED);
                        var createdPublication1 = publication;

                        PublicationsAPI.createPublication('camtest', [ generateRandomSourceId() ], publication2, function(err, publication, result) {
                            assert.ok(!err);
                            assert.strictEqual(publication.createdBy, coenego.user.id);
                            assert.strictEqual(result, PublicationsConstants.ingestionResult.CREATED);
                            var createdPublication2 = publication;

                            // Check if the coenego user has been linked to the publication
                            PublicationsRestAPI.getPublicationsByAuthor(coenego.restContext, coenego.user.id, null, null, function(err, data) {
                                assert.ok(!err);
                                assert.ok(data);
                                assert.strictEqual(data.results.length, 2);

                                var publicationSortFn = function(publication) {
                                    return publication.id;
                                };

                                var sortedCreatedPublications = _.sortBy([createdPublication1, createdPublication2], publicationSortFn);
                                var sortedResults = _.sortBy(data.results, publicationSortFn);
                                assert.strictEqual(sortedCreatedPublications.length, sortedResults.length);
                                _.each(sortedCreatedPublications, function(createdPublication, i) {
                                    assert.strictEqual(sortedResults[i].id, createdPublication.id);
                                    assert.strictEqual(sortedResults[i].authors.length, createdPublication.authors.length);
                                    assert.strictEqual(sortedResults[i].createdBy, createdPublication.createdBy);
                                    assert.strictEqual(sortedResults[i].date, createdPublication.date);
                                    assert.strictEqual(sortedResults[i].displayName, createdPublication.displayName);
                                    assert.strictEqual(sortedResults[i].publicationType, createdPublication.publicationType);
                                });

                                return callback();
                            });
                        });
                    });
                });
            });
        });

        describe('#getPublicationsByCreator()', function() {

            /**
             * Test that verifies that a user is linked the the publication he created
             */
            it('verify a user is linked to the publication he created', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, coenego) {
                    assert.ok(!err);

                    // Create a new publication
                    var publication = generatePublicationData({
                        'createdBy': coenego.user.id,
                        'authors': [coenego.user.id]
                    });

                    PublicationsAPI.createPublication('camtest', [ generateRandomSourceId() ], publication, function(err, publication, result) {
                        assert.ok(!err);
                        assert.strictEqual(publication.createdBy, coenego.user.id);
                        assert.strictEqual(result, PublicationsConstants.ingestionResult.CREATED);

                        // Check if the coenego user has been linked to the publication
                        PublicationsRestAPI.getPublicationsByCreator(coenego.restContext, coenego.user.id, null, null, function(err, data) {
                            assert.ok(!err);
                            assert.ok(data);
                            assert.strictEqual(data.results.length, 1);
                            assert.strictEqual(data.results[0].id, publication.id);
                            assert.strictEqual(data.results[0].authors.length, 1);
                            assert.strictEqual(data.results[0].createdBy, publication.createdBy);
                            assert.strictEqual(data.results[0].date, publication.date);
                            assert.strictEqual(data.results[0].displayName, publication.displayName);
                            assert.strictEqual(data.results[0].publicationType, publication.publicationType);
                            return callback();
                        });
                    });
                });
            });

            /**
             * Test that verifies that the correct publications are returned when creating multiple ones with the same user
             */
            it('verify that the correct publications are returned when creating multiple ones with the same user', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, coenego) {
                    assert.ok(!err);

                    // Create a new publication
                    var publication1 = generatePublicationData({
                        'createdBy': coenego.user.id
                    });

                    var publication2 = generatePublicationData({
                        'createdBy': coenego.user.id
                    });

                    PublicationsAPI.createPublication('camtest', [ generateRandomSourceId() ], publication1, function(err, createdPublication1, result) {
                        assert.ok(!err);
                        assert.strictEqual(createdPublication1.createdBy, coenego.user.id);
                        assert.strictEqual(result, PublicationsConstants.ingestionResult.CREATED);

                        PublicationsAPI.createPublication('camtest', [ generateRandomSourceId() ], publication2, function(err, createdPublication2, result) {
                            assert.ok(!err);
                            assert.strictEqual(createdPublication2.createdBy, coenego.user.id);
                            assert.strictEqual(result, PublicationsConstants.ingestionResult.CREATED);

                            // Check if the coenego user has been linked to the publication
                            PublicationsRestAPI.getPublicationsByCreator(coenego.restContext, coenego.user.id, null, null, function(err, data) {
                                assert.ok(!err);
                                assert.ok(data);
                                assert.strictEqual(data.results.length, 2);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#updatePublication', function() {

        describe('verify parameters', function() {

            /**
             * Test that verifies that the parameters are validated
             */
            it('verify parameter validation', function(callback) {
                createUserWithPublications(1, function(coenego, createdPublications) {
                    assert.ok(createdPublications);

                    // Malformed publication ID
                    PublicationsRestAPI.updatePublication(coenego.restContext, 'Not a publication ID', {}, function(err, data) {
                        assert.strictEqual(err.code, 400);

                        // Malformed fields
                        PublicationsRestAPI.updatePublication(coenego.restContext, createdPublications[0].id, {}, function(err, data) {
                            assert.strictEqual(err.code, 400);

                            // Malformed fields
                            PublicationsRestAPI.updatePublication(coenego.restContext, createdPublications[0].id, [], function(err, data) {
                                assert.strictEqual(err.code, 400);

                                // Wellformed fields
                                var fields = {'displayName': 'A displayName'};
                                PublicationsRestAPI.updatePublication(coenego.restContext, createdPublications[0].id, fields, function(err, data) {
                                    assert.ok(!err);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('verify permissions', function() {

            /**
             * Test that verifies that unauthorized users are not allowed to update publications
             */
            it('verify that unauthorized users are not allowed to update publications', function(callback) {
                createUserWithPublications(1, function(coenego, createdPublications) {
                    assert.ok(createdPublications);

                    // Update the publication with an anoymous user
                    var fields = {'displayName': 'A displayName'};
                    PublicationsRestAPI.updatePublication(camAnonymousRestCtx, createdPublications[0].id, fields, function(err, data) {
                        assert.strictEqual(err.code, 401);

                        // Update the publication with an GT admin
                        PublicationsRestAPI.updatePublication(gtAdminRestCtx, createdPublications[0].id, fields, function(err, data) {
                            assert.strictEqual(err.code, 401);

                            // Update the publication with the Simong user
                            PublicationsRestAPI.updatePublication(simongRestContext, createdPublications[0].id, fields, function(err, data) {
                                assert.strictEqual(err.code, 401);
                                return callback();
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that regular users are allowed to update publications
             */
            it('verify that regular users are allowed to update publications', function(callback) {
                createUserWithPublications(1, function(coenego, createdPublications) {
                    assert.ok(createdPublications);
                    var fields = {'displayName': 'A displayName'};
                    PublicationsRestAPI.updatePublication(coenego.restContext, createdPublications[0].id, fields, function(err, data) {
                        assert.ok(!err);
                        return callback();
                    });
                });
            });

            /**
             * Test that verifies that tenant admins are allowed to update publications
             */
            it('verify that tenant admins are allowed to update publications', function(callback) {
                createUserWithPublications(1, function(coenego, createdPublications) {
                    assert.ok(createdPublications);
                    var fields = {'displayName': 'A displayName'};
                    PublicationsRestAPI.updatePublication(camAdminRestCtx, createdPublications[0].id, fields, function(err, data) {
                        assert.ok(!err);
                        return callback();
                    });
                });
            });

            /**
             * Test that verifies that global admins are allowed to update publications
             */
            it('verify that global admins are allowed to update publications', function(callback) {
                createUserWithPublications(1, function(coenego, createdPublications) {
                    assert.ok(createdPublications);
                    RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', null, function(err, ctx) {
                        var fields = {'displayName': 'A displayName'};
                        PublicationsRestAPI.updatePublication(ctx, createdPublications[0].id, fields, function(err, data) {
                            assert.ok(!err);
                            return callback();
                        });
                    });
                });
            });
        });

        describe('updating publications', function() {

            /**
             * Test that verifies that updating a publication is successful
             */
            it('verify that updating a publication is successful', function(callback) {
                createUserWithPublications(1, function(coenego, createdPublications) {
                    assert.ok(createdPublications);

                    // Update the publication with a Cam admin
                    var fields = {'displayName': 'An unopened door is a happy door'};
                    PublicationsRestAPI.updatePublication(coenego.restContext, createdPublications[0].id, fields, function(err, data) {
                        assert.ok(!err);
                        assert.ok(data.publication);
                        assert.strictEqual(data.publication.id, createdPublications[0].id);
                        assert.strictEqual(data.publication.displayName, 'An unopened door is a happy door');
                        assert.strictEqual(data.result, PublicationsConstants.ingestionResult.UPDATED);

                        // Update the publication with a Cam admin
                        var fields = {'displayName': 'Some exotic display name'};
                        PublicationsRestAPI.updatePublication(camAdminRestCtx, createdPublications[0].id, fields, function(err, data) {
                            assert.ok(!err);
                            assert.ok(data.publication);
                            assert.strictEqual(data.publication.id, createdPublications[0].id);
                            assert.strictEqual(data.publication.displayName, 'Some exotic display name');
                            assert.strictEqual(data.result, PublicationsConstants.ingestionResult.UPDATED);
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('#linkPublicationToUser()', function() {

        describe('verify parameters', function() {

            /**
             * Test that verifies that the parameters are validated
             */
            it('verify parameter validation', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, simong) {

                    var publication = generatePublicationData();
                    PublicationsAPI.createPublication('camtest', [generateRandomSourceId()], publication, function(err, publication, result) {

                        // Invalid publication id permutation
                        PublicationsRestAPI.linkPublicationToUser(camAdminRestCtx, 'not a publicationId', 'someAuthor', simong.user.id, function(err) {
                            assert.strictEqual(err.code, 400);

                            // Invalid author
                            PublicationsRestAPI.linkPublicationToUser(camAdminRestCtx, publication.id, null, simong.user.id, function(err) {
                                assert.strictEqual(err.code, 400);

                                // Invalid user id
                                PublicationsRestAPI.linkPublicationToUser(camAdminRestCtx, publication.id, 'someAuthor', null, function(err) {
                                    assert.strictEqual(err.code, 400);
                                    PublicationsRestAPI.linkPublicationToUser(camAdminRestCtx, publication.id, 'someAuthor', 'not a user', function(err) {
                                        assert.strictEqual(err.code, 400);

                                        // Sanity check
                                        PublicationsRestAPI.linkPublicationToUser(camAdminRestCtx, publication.id, 'someAuthor', simong.user.id, function(err) {
                                            assert.ok(!err);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies you cannot link a user twice
             */
            it('verify that users cannot be linked twice', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, users, simong, mrvisser) {
                    assert.ok(!err);

                    var publication = generatePublicationData({
                        'authors': ['authorA', 'authorB']
                    });
                    PublicationsAPI.createPublication('camtest', [generateRandomSourceId()], publication, function(err, publication, result) {
                        assert.ok(!err);
                        PublicationsRestAPI.linkPublicationToUser(camAdminRestCtx, publication.id, 'authorA', simong.user.id, function(err, linkData) {
                            assert.ok(!err);
                            assert.strictEqual(linkData.result, PublicationsConstants.linkResult.LINKED);
                            PublicationsRestAPI.linkPublicationToUser(camAdminRestCtx, publication.id, 'authorA', simong.user.id, function(err, linkData) {
                                assert.ok(!err);
                                assert.strictEqual(linkData.result, PublicationsConstants.linkResult.PRESENT);
                                PublicationsRestAPI.getPublication(camAdminRestCtx, publication.id, function(err, publication) {
                                    assert.ok(!err);
                                    assert.strictEqual(publication.authors.length, 2);

                                    // 'authorA' should not have been replaced
                                    assert.strictEqual(_.filter(publication.authors, function(author) { return (typeof author === 'string'); }).length, 1);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that registered OAE users can be linked to a publication
             */
            it('verify linking authors with registered oae users', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, coenego) {
                    assert.ok(!err);

                    // Create a new publication
                    var publication = generatePublicationData({
                        'authors': ['authorA', coenego.user.id],
                        'displayName': 'displayName B'
                    });
                    PublicationsAPI.createPublication('camtest', [generateRandomSourceId()], publication, function(err, publication, result) {
                        assert.ok(!err);
                        assert.strictEqual(publication.authors.length, 2);
                        assert.strictEqual(publication.authors[0], 'authorA');
                        assert.strictEqual(publication.authors[1], coenego.user.id);
                        assert.strictEqual(publication.displayName, 'displayName B');

                        // Request the publication should return a decorated user profile
                        PublicationsRestAPI.getPublication(camAnonymousRestCtx, publication.id, function(err, publication) {
                            assert.ok(!err);
                            assert.ok(_.isString(publication.authors[0]));
                            assert.strictEqual(publication.authors[0], 'authorA');
                            assert.ok(_.isObject(publication.authors[1]));
                            assert.strictEqual(publication.authors[1].id, coenego.user.id);
                            assert.strictEqual(publication.authors[1].displayName, coenego.user.displayName);
                            return callback();
                        });
                    });
                });
            });
        });

        describe('verify permissions', function() {

            /**
             * Test that verifies that unauthorized users are not allwed to link users
             */
            it('verify that unauthorized users are not allowed to link users', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, users, simong, mrvisser) {
                    assert.ok(!err);

                    var publication = generatePublicationData({
                        'authors': ['authorA', 'authorB']
                    });
                    PublicationsAPI.createPublication(camAdminRestCtx, [generateRandomSourceId()], publication, function(err, publication, result) {
                        assert.ok(!err);

                        // Anonymous users shouldn't be allowed to link users
                        PublicationsRestAPI.linkPublicationToUser(camAnonymousRestCtx, publication.id, 'authorA', simong.user.id, function(err) {
                            assert.strictEqual(err.code, 401);

                            // Regular users shouldn't be allowed to link other users
                            PublicationsRestAPI.linkPublicationToUser(mrvisser.restContext, publication.id, 'authorA', simong.user.id, function(err) {
                                assert.strictEqual(err.code, 401);

                                // Double-check that none of the users were linked
                                PublicationsRestAPI.getPublication(camAdminRestCtx, publication.id, function(err, publication) {
                                    assert.ok(!err);
                                    assert.strictEqual(publication.authors.length, 2);
                                    _.each(publication.authors, function(author) {
                                        assert.ok(typeof author === 'string');
                                    });
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that authors are allowed to link themselves
             */
            it('verify that authors are allowed to link themselves', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, users, simong, mrvisser) {
                    assert.ok(!err);

                    // Create a new publication
                    var publication = generatePublicationData({
                        'authors': ['authorA', 'authorB']
                    });
                    PublicationsAPI.createPublication(camAdminRestCtx, [generateRandomSourceId()], publication, function(err, publication, result) {
                        assert.ok(!err);

                        // Regular users should be allowed to link themselves
                        PublicationsRestAPI.linkPublicationToUser(simong.restContext, publication.id, 'authorA', simong.user.id, function(err) {
                            assert.ok(!err);

                            // Double-check that one of the users has actually been linked
                            PublicationsRestAPI.getPublication(camAdminRestCtx, publication.id, function(err, publication) {
                                assert.ok(!err);
                                assert.strictEqual(publication.authors.length, 2);
                                _.each(publication.authors, function(author) {
                                    if (typeof author !== 'string') {
                                        assert.strictEqual(author.id, simong.user.id);
                                    } else {
                                        assert.strictEqual(author, 'authorB');
                                    }
                                });
                                return callback();
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that tenant admins are allowed to link users
             */
            it('verify that tenant admins are allowed to link users', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, users, simong, mrvisser) {
                    assert.ok(!err);

                    var publication = generatePublicationData({
                        'authors': ['authorA', 'authorB']
                    });
                    PublicationsAPI.createPublication(camAdminRestCtx, [generateRandomSourceId()], publication, function(err, publication, result) {
                        assert.ok(!err);

                        // Link the first author
                        PublicationsRestAPI.linkPublicationToUser(camAdminRestCtx, publication.id, 'authorA', simong.user.id, function(err) {
                            assert.ok(!err);

                            // Link the second author
                            PublicationsRestAPI.linkPublicationToUser(camAdminRestCtx, publication.id, 'authorB', mrvisser.user.id, function(err) {
                                assert.ok(!err);

                                // Double-check the tenant admin actually linked the users
                                PublicationsRestAPI.getPublication(camAdminRestCtx, publication.id, function(err, publication) {
                                    assert.ok(!err);
                                    assert.strictEqual(publication.authors.length, 2);
                                    _.each(publication.authors, function(author) {
                                        assert.ok(typeof author !== 'string');
                                        assert.ok(_.contains([simong.user.id, mrvisser.user.id], author.id));
                                    });
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that global admins are allowed to link users
             */
            it('verify that global admins are allowed to link users', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, camUser) {
                    assert.ok(!err);

                    TestsUtil.generateTestUsers(gtAdminRestCtx, 1, function(err, users, gtUser) {
                        assert.ok(!err);

                        var publication = generatePublicationData({
                            'authors': ['authorA', 'authorB']
                        });
                        PublicationsAPI.createPublication(camAdminRestCtx, [generateRandomSourceId()], publication, function(err, publication, result) {
                            assert.ok(!err);

                            // Link the first user
                            RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', null, function(err, ctx) {
                                assert.ok(!err);
                                PublicationsRestAPI.linkPublicationToUser(ctx, publication.id, 'authorA', camUser.user.id, function(err) {
                                    assert.ok(!err);

                                    // Link the second user
                                    PublicationsRestAPI.linkPublicationToUser(ctx, publication.id, 'authorB', gtUser.user.id, function(err) {
                                        assert.ok(!err);

                                        // Double-check the global admin actually linked the users
                                        PublicationsRestAPI.getPublication(camAdminRestCtx, publication.id, function(err, publication) {
                                            assert.ok(!err);
                                            assert.strictEqual(publication.authors.length, 2);
                                            _.each(publication.authors, function(author) {
                                                assert.ok(typeof author !== 'string');
                                                assert.ok(_.contains([camUser.user.id, gtUser.user.id], author.id));
                                            });
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
