/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var clone = require('clone');
var events = require('events');
var util = require('util');

var Context = require('oae-context').Context;
var Counter = require('oae-util/lib/counter');
var log = require('oae-logger').logger('oae-activity-notifications');
var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var TenantsAPI = require('oae-tenants');
var Validator = require('oae-authz/lib/validator').Validator;

var ActivityAggregator = require('./aggregator');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityDAO = require('./dao');
var ActivityEmitter = require('./emitter');
var ActivityRegistry = require('./registry');
var ActivityTransformer = require('./transformer');
var ActivityUtil = require('oae-activity/lib/util');

// Tracks the handling of notifications for synchronization to determine when there are no
// notifications being processed
var notificationsCounter = new Counter();

/*!
 * When a batch of activities are delivered, we check if there are any notifications in there and
 * increment all the target user notification counters.
 */
ActivityEmitter.on(ActivityConstants.events.DELIVERED_ACTIVITIES, function(deliveredActivities) {

    var userIdsIncrBy = {};

    // Build up a hash of userId -> notifications
    var deliveredNotifications = {};
    var notificationsToDecrement = 0;
    _.each(deliveredActivities, function(deliveredActivities, activityStreamId) {
        if (deliveredActivities.streamType === 'notification') {
            var userId = deliveredActivities.resourceId;
            deliveredNotifications[userId] = deliveredActivities.activities;

            // Increment the notifications count, when each one of these potential notifications is
            // handled / complete, they should be decremented
            notificationsToDecrement++;
            notificationsCounter.incr();
            userIdsIncrBy[userId] = deliveredActivities.activities.length;
        }
    });

    // All users receiving notifications will have their "notifications unread" counter incremented
    incrementNotificationsUnread(userIdsIncrBy, function(err) {
        if (err) {
            log().error({'err': new Error(err.msg), 'userIdsIncrBy': userIdsIncrBy}, 'Could not mark notifications as unread');
        }

        notificationsCounter.decr(notificationsToDecrement);
    });
});

/**
 * Marks all notifications as read for a given user.
 *
 * @param  {User}       user                    The user object for which the notifications should be marked as read
 * @param  {Function}   callback                Invoked when the process completes
 * @param  {Object}     callback.err            An error that occurred, if any
 * @param  {Number}     callback.lastReadTime   The timestamp (millis since epoch) that was persisted as the time at which the notifications were last read
 */
var markNotificationsRead = module.exports.markNotificationsRead = function(user, callback) {
    // In addition to the notification count, the lastReadTime will help determine which of the notifications are
    // new and which are not.
    var lastReadTime = Date.now();
    var profileFields = {
        'notificationsUnread': '0',
        'notificationsLastRead': lastReadTime.toString()
    };

    // Clear all the notifications unread to 0
    ActivityDAO.clearNotificationsUnreadCount(user.id, function(err) {
        if (err) {
            return callback(err);
        }

        // Update the notifications values in the basic profile
        PrincipalsDAO.updatePrincipal(user.id, profileFields, function(err) {
            if (err) {
                return callback(err);
            }

            // We can return here as resetting the activity aggregation and removing the
            // activities from the email activity stream can happen asynchronously
            callback(null, lastReadTime);

            // Reset the aggregator for this user his notification stream. New notifications will not aggregate
            // with older notifications which will make it clearer to the user which activity is the new one
            var notificationActivityStreamId = ActivityUtil.createActivityStreamId(user.id, 'notification');
            ActivityAggregator.resetAggregationForActivityStreams([notificationActivityStreamId]);

            // By clearing a user's email activity stream when he marks his notifications as read,
            // we avoid sending out a (potential) unnecessary email. This only happens when the user
            // marks his notifications as read between the activity ocurring and the time the email would've gone out
            if (user.emailPreference === PrincipalsConstants.emailPreferences.IMMEDIATE) {
                var emailActivityStreamId = ActivityUtil.createActivityStreamId(user.id, 'email');
                ActivityDAO.clearActivityStream(emailActivityStreamId, function(err) {
                    if (err) {
                        log().warn({'err': err}, 'Could not clear the email activity stream');
                    }
                });
            }
        });
    });
};

/**
 * Increment the notifications unread count for the given user ids.
 *
 * @param  {Object}     userIdIncrs         An object keyed by user id, whose value is the number by which to increment the count
 * @param  {Function}   callback            Invoked when the counts have been incremented
 * @param  {Object}     callback.err        An error that occurred, if any
 */
var incrementNotificationsUnread = module.exports.incrementNotificationsUnread = function(userIdIncrs, callback) {
    /*!
     * First update the cached new notification counts, then update Cassandra. Some very clear drawbacks here:
     *
     *  1.  If 2 nodes increment and then persist to cassandra, and the first incr wins into cassandra, counts are
     *      off by 1. The next time a notification comes around it will be fixed.
     *  2.  If Redis is completely flushed or crashes with no disk storage, kiss all your counts good-bye. Will not
     *      become accurate again for a user until they "mark as read".
     *
     * Some ways to improve could be to repair by using a SELECT COUNT(*)... with the notificationsLastRead property,
     * but it is currently not clear how to detect which counts are incorrect -- perhaps auto-repair when a user reads
     * their list of notifications. This is all out of scope ATM.
     */
    ActivityDAO.incrementNotificationsUnreadCounts(userIdIncrs, function(err, newValues) {
        if (err) {
            return callback(err);
        }

        var todo = _.keys(newValues).length;
        var complete = false;

        if (todo === 0) {
            return callback();
        }

        /*!
         * Determines when the process of updating all principal counts in cassandra is complete.
         *
         * @param  {Object}     err     An error that occurred, if any.
         */
        var _monitorUpdatePrincipal = function(err) {
            if (complete) {
                // Nothing to do.
            } else if (err) {
                complete = true;
                return callback(err);
            } else {
                todo--;
                if (todo === 0) {
                    complete = true;
                    return callback();
                }
            }
        };

        // Update all principal profiles with the new count
        _.each(newValues, function(newValue, userId) {
            PrincipalsDAO.updatePrincipal(userId, {'notificationsUnread': newValue.toString()}, _monitorUpdatePrincipal);
        });
    });
};

/**
 * Perform an action when the notifications queue becomes empty. This is useful to determine when the notifications
 * are no longer processing, for purposes of gracefully stopping the server or synchronization of processing for
 * tests.
 *
 * @param  {Function}   handler     The function to invoke when there are 0 notifications being processed
 */
var whenNotificationsEmpty = module.exports.whenNotificationsEmpty = function(handler) {
    notificationsCounter.whenZero(handler);
};

/**
 * Get the registered activity options (via `ActivityAPI#registerActivityType`) that apply to this activity.
 *
 * @param  {Activity}   activity    The activity object for which to get the registered options
 * @api private
 */
var _getRegisteredActivityOptions = function(activity) {
    var activityType = activity[ActivityConstants.properties.OAE_ACTIVITY_TYPE];
    return ActivityRegistry.getRegisteredActivityTypes()[activityType];
};
