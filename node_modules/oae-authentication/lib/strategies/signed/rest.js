/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var passport = require('passport');

var ConfigAPI = require('oae-config');
var OAE = require('oae-util/lib/oae');
var OaeServer = require('oae-util/lib/server');

var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationSignedUtil = require('oae-authentication/lib/strategies/signed/util');
var AuthenticationUtil = require('oae-authentication/lib/util');

// Ensure that the signed auth URL bypass CSRF validation.
// It has its own authenticity handling.
OaeServer.addSafePathPrefix('/api/auth/signed');

/**
 * @REST getAuthSignedTenant
 *
 * Get the request information for a global administrator to log into a tenant
 *
 * @Server      admin
 * @Method      GET
 * @Path        /auth/signed/tenant
 * @QueryParam  {string}            tenant          The alias of the tenant on which to log in
 * @Return      {SignedAuthInfo}                    Request information needed to log into the tenant
 */
OAE.globalAdminRouter.on('get', '/api/auth/signed/tenant', function(req, res) {
    AuthenticationSignedUtil.getSignedTenantAuthenticationRequest(req.ctx, req.query.tenant, function(err, requestInfo) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, requestInfo);
    });
});

/*!
 * Convenience function to handle the `/api/auth/signed/become` routes for both
 * the admin router and tenant router
 *
 * @param  {Request}    req     Express Request object of the request
 * @param  {Response}   res     Express Response object on which to send the response
 */
var _getBecomeUserAuthenticationRequestInfo = function(req, res) {
    AuthenticationSignedUtil.getSignedBecomeUserAuthenticationRequest(req.ctx, req.query.becomeUserId, function(err, requestInfo) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, requestInfo);
    });
};

/**
 * @REST getAuthSignedBecome
 *
 * Get the request information for an administrator to become a user
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /auth/signed/become
 * @QueryParam  {string}            becomeUserId    The id of the user to become
 * @Return      {SignedAuthInfo}                    Request information needed to become the user
 */
OAE.globalAdminRouter.on('get', '/api/auth/signed/become', _getBecomeUserAuthenticationRequestInfo);
OAE.tenantRouter.on('get', '/api/auth/signed/become', _getBecomeUserAuthenticationRequestInfo);

/**
 * @REST postAuthSigned
 *
 * Log in using signed authentication
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /auth/signed
 * @BodyParam   {SignedAuthBody}    body            The request information acquired from the `GET /api/auth/signed/*` endpoint
 * @Return      {void}
 */
OAE.tenantRouter.on('post', '/api/auth/signed', function(req, res, next) {
    // Get the ID under which we registered this strategy for this tenant
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.SIGNED);

    // Authenticate this request using the information
    passport.authenticate(strategyId, {'successRedirect': '/me', 'failureRedirect': '/'})(req, res, next);
});
