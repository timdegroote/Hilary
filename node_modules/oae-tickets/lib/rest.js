/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var sanitize = require('validator').sanitize;

var OAE = require('oae-util/lib/oae');
var Publication = require('oae-publications/lib/model').Publication;

var TicketsAPI = require('./api');

/*!
 * Returns a ticket
 *
 * Rest endpoint:
 *
 * _GET_ `/api/ticket/:ticketId`
 */
OAE.tenantRouter.on('get', '/api/ticket/:ticketId', function(req, res) {
    TicketsAPI.getTicket(req.ctx, req.params.ticketId, function(err, ticket) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, ticket);
    });
});

/*!
 * Creates a ticket
 *
 * Rest endpoint:
 *
 * _POST_ `/api/ticket/create`
 *
 * * returns a JSON object of a ticket
 */
OAE.tenantRouter.on('post', '/api/ticket/create', function(req, res) {

    // Fetch the tenant alias from the request context
    var tenantAlias = req.ctx.tenant().alias;

    // Fetch the userId from the request context
    var userId = null;
    if (req.ctx.user()) {
        userId = req.ctx.user().id;
    }

    // Fetch the contentId from the request body
    var contentId = null;
    if (req.body.contentId) {
        contentId = req.body.contentId;
    }

    // Fetch the sourceIds from the request body
    var sourceIds = null;
    if (req.body.sourceIds) {
        sourceIds = req.body.sourceIds;
        if (!_.isArray(sourceIds)) {
            sourceIds = [sourceIds];
        }
    }

    // Fetch the publication from the request body
    var publication = null;
    if (req.body.publication) {
        var authors = null;
        if (req.body.publication.authors) {
            authors = req.body.publication.authors;
            if (!_.isArray(authors)) {
                authors = [authors];
            }
        }

        var funders = null;
        if (req.body.publication.funders) {
            funders = _.compact(_.flatten([req.body.publication.funders]));
        }

        var displayName = req.body.publication.displayName || null;
        var publicationType = req.body.publication.publicationType || null;
        var thumbnailUri = req.body.publication.thumbnailUri || null;
        var publisher = req.body.publication.publisher || null;
        var openAccessType = req.body.publication.openAccessType || null;
        var journalName = req.body.publication.journalName || null;
        var issueNumber = req.body.publication.issueNumber || null;
        var pageBegin = req.body.publication.pageBegin || null;
        var pageEnd = req.body.publication.pageEnd || null;
        var institution = req.body.publication.institution || null;
        var department = req.body.publication.department || null;
        var contactEmail = req.body.publication.contactEmail || null;
        var useCambridgeAddendum = req.body.publication.useCambridgeAddendum || null;
        var comments = req.body.publication.comments || null;

        var date = parseInt(req.body.publication.date, 10);
        date = isNaN(date) ? req.body.publication.date || null : date;

        var acceptanceDate = parseInt(req.body.publication.acceptanceDate, 10);
        acceptanceDate = isNaN(acceptanceDate) ? req.body.publication.acceptanceDate || null : acceptanceDate;

        // When a publication is first created it defaults to be under an indefinite embargo
        var underEmbargo = true;
        var embargoDate = null;

        publication = Publication(null, tenantAlias, userId, contentId, displayName, publicationType, date, thumbnailUri, authors, publisher, {
            'openAccessType': openAccessType,
            'journalName': journalName,
            'issueNumber': issueNumber,
            'pageBegin': pageBegin,
            'pageEnd': pageEnd,
            'funders': funders,
            'institution': institution,
            'department': department,
            'contactEmail': contactEmail,
            'useCambridgeAddendum': useCambridgeAddendum,
            'comments': comments,
            'underEmbargo': underEmbargo,
            'embargoDate': embargoDate,
            'acceptanceDate': acceptanceDate
        });
    }

    TicketsAPI.createTicket(req.ctx, contentId, sourceIds, publication, function(err, ticket) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, ticket);
    });
});

/*!
 * Deletes a ticket
 *
 * Rest endpoint:
 *
 * _POST_ `/api/ticket/:ticketId/delete`
 */
OAE.tenantRouter.on('post', '/api/ticket/:ticketId/delete', function(req, res) {
    TicketsAPI.deleteTicket(req.ctx, req.params.ticketId, function(err, ticket) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, ticket);
    });
});

/*!
 * Updates a ticket
 *
 * Rest endpoint:
 *
 * _POST_ `/api.ticket/:ticketId`
 */
OAE.tenantRouter.on('post', '/api/ticket/:ticketId', function(req, res) {
    TicketsAPI.updateTicket(req.ctx, req.params.ticketId, req.body, function(err, ticket) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, ticket);
    });
});
