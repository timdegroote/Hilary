/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var ShortId = require('shortid');
var util = require('util');

var AuthzUtil = require('oae-authz/lib/util');
var Locking = require('oae-util/lib/locking');
var Publication = require('oae-publications/lib/model').Publication;
var PublicationsConstants = require('oae-publications/lib/constants').PublicationsConstants;
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');
var PublicationsRestAPI = require('oae-publications/lib/test/util');

var TicketsAPI = require('../lib/api');
var TicketsConstants = require('../lib/constants').TicketsConstants;
var TicketsDAO = require('../lib/internal/dao');
var TicketsRestAPI = require('../lib/test/util');
var TicketsUtil = require('../lib/util');

describe('Tickets', function() {

    // Rest context that can be used every time we need to make a reqeust as a global admin
    var globalAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a cam tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a gt tenant admin
    var gtAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // User object that can be used every time we need user specific data
    var coenegoUser = null;
    var halUser = null;

    /**
     * Initializes the admin/user REST contexts
     */
    before(function(callback) {

        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up the cam admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the gt admin rest context
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        // Fill up the anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the coenego and hal user rest context
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, camUsers, _coenegoUser, _halUser) {
            assert.ok(!err);
            coenegoUser = _coenegoUser;
            halUser = _halUser;
            return callback();
        });
    });

    /**
     * Generates a random source Id
     *
     * @return {String}     A random string that can be used as a source id
     */
    var generateRandomSourceId = function() {
        return 'mendeley#' + TestsUtil.generateRandomText();
    };

    /**
     * Utility method that returns some random publication data
     *
     * @return {Object}     Object containing random publication data
     */
    var generatePublicationData = function(opts) {
        return _.extend(Publication(null, 'camtest', null, null, TestsUtil.generateRandomText(), _.sample(PublicationsConstants.publicationTypes), Date.now(), null, [TestsUtil.generateRandomText(), TestsUtil.generateRandomText()], TestsUtil.generateRandomText(), {
            'openAccessType': _.sample(['gold', 'green']),
            'journalName': TestsUtil.generateRandomText(),
            'issueNumber': String(_.random(0, 1000)),
            'pageBegin': String(_.random(0, 1000)),
            'pageEnd': String(_.random(0, 1000)),
            'funders': _.sample([[TestsUtil.generateRandomText(), TestsUtil.generateRandomText()], null]),
            'institution': TestsUtil.generateRandomText(),
            'department': TestsUtil.generateRandomText(),
            'contactEmail': TestsUtil.generateTestEmailAddress(),
            'useCambridgeAddendum': String(_.sample([true, false])),
            'comments': TestsUtil.generateRandomText(),
            'acceptanceDate': _.sample([_.random(0, 2000000000000), null])
        }), opts);
    };

    /**
     * Utility method that returns a stream that points to a PDF
     *
     * @return {Stream}     A stream that points to a PDF that can be uploaded
     */
    var getFileStream = function() {
        var file = __dirname + '/data/paper.pdf';
        return fs.createReadStream(file);
    };

    /**
     * Utility method that checks if the publication's decorated ticket corresponds with the created ticket
     *
     * @param  {Ticket}         ticket              Object representing a ticket
     * @param  {Object}         publication         Object representing a publication
     * @return {Error}                              An assertion error is thrown when the publications' values don't match
     */
    var isCorrespondingTicket = function(ticket, publication) {
        assert.ok(publication.ticket);
        var requestedTicket = _.clone(ticket);
        if (requestedTicket.publication) {
            delete requestedTicket['publication'];
        }
        _.each(_.keys(requestedTicket), function(key) {
            assert.strictEqual(requestedTicket[key], publication.ticket[key]);
        });
    };

    /**
     * Utility method that checks if the ticket's decorated publication corresponds with the created publication
     *
     * @param  {Object}         publication         Object containing publication data
     * @param  {Ticket}         ticket              Object representing a created ticket
     * @return {Error}                              An assertion error is thrown when the publications' values don't match
     */
    var isCorrespondingPublication = function(publication, ticket) {
        assert.ok(ticket.publication);
        _.each(_.keys(publication), function(key) {
            if (!_.isArray(publication[key])) {
                assert.strictEqual(publication[key], ticket.publication[key]);
            } else {
                assert.strictEqual(publication[key].length, ticket.publication[key].length);
            }
        });
    };

    /**
     * Utility method that checks if a valid ticket is returned
     *
     * @param  {Ticket}         ticket              Object representing a ticket that was requested
     * @return {Error}                              An assertion error is thrown if the tickets values are invalid
     */
    var isValidTicket = function(ticket) {
        assert.ok(TicketsUtil.isTicketId(ticket.ticketId));
        assert.ok(TicketsUtil.isExternalId(ticket.externalId));
        assert.ok(ticket.tenantAlias);
        assert.ok(ticket.publicationId);
        assert.ok(ticket.createdBy);
        assert.ok(ticket.created);
        assert.ok(ticket.lastModified);
        assert.ok(ticket.status);
    };

    describe('Tickets', function() {

        describe('#createTicket()', function() {

            describe('verify parameters', function() {

                describe('contentId', function() {

                    /**
                     * Test that verifies that an error is thrown when entering an invalid content ID
                     */
                    it('verify contentId', function(callback) {

                        // Passing in an empty contentId should return an error
                        TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': null, 'sourceIds': generateRandomSourceId}, function(err, ticket) {
                            assert.strictEqual(err.code, 400);

                            // Passing in a malformed contentId should return an error
                            TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': 'a_malformed_id', 'sourceIds': generateRandomSourceId}, function(err, ticket) {
                                assert.strictEqual(err.code, 400);

                                // Passing in an unexisting contentId should return an error
                                TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': util.format('c:camtest:%s', ShortId.generate()), 'sourceIds': generateRandomSourceId}, function(err, ticket) {
                                    assert.strictEqual(err.code, 404);
                                    return callback();
                                });
                            });
                        });
                    });
                });

                describe('sourceIds', function() {

                    /**
                     * Test that verifies that an errors is thrown when entering invalid sourceIds
                     */
                    it('verify sourceIds', function(callback) {

                         // Create a new content item
                        RestAPI.Content.createFile(camAdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                            assert.ok(!err);

                            // Creating a ticket with invalid or missing 'authors'
                            TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': content.id}, function(err, ticket) {
                                assert.strictEqual(err.code, 400);

                                // Creating a ticket with an empty 'authors' collection
                                TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': content.id, 'sourceIds': []}, function(err, ticket) {
                                    assert.strictEqual(err.code, 400);

                                    // Creating a ticket with an empty 'authors' collection
                                    TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': content.id, 'sourceIds': {}}, function(err, ticket) {
                                        assert.strictEqual(err.code, 400);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });

                describe('publication', function() {

                    /**
                     * Test that verifies that a valid publication has been specified
                     */
                    it('verify that a valid publication has been specified', function(callback) {

                        // Create a new content item
                        RestAPI.Content.createFile(camAdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                            assert.ok(!err);

                            // Creating a ticket without passsing in a publication should throw an error
                            TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': null}, function(err, ticket) {
                                assert.strictEqual(err.code, 400);
                                assert.strictEqual(err.msg, 'Missing or invalid publication');
                                return callback();
                            });
                        });
                    });

                    /**
                     * Test that verifies that a publication can only have one ticket
                     */
                    it('verify that a publication can only have one ticket', function(callback) {
                        var tenantAlias = TestsUtil.generateRandomText(1);
                        TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenantAdminRestContext) {
                            assert.ok(!err);

                            // Generate a test user
                            TestsUtil.generateTestUsers(tenantAdminRestContext, 1, function(err, users, camUser) {
                                assert.ok(!err);

                                // Create a new content item
                                RestAPI.Content.createFile(camUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                                    assert.ok(!err);

                                    // Create a new ticket
                                    var publication = generatePublicationData();
                                    TicketsRestAPI.createTicket(camUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': publication}, function(err, ticket) {
                                        assert.ok(!err);

                                        // Create a new ticket by passing in the same publicationId
                                        var ticketId = AuthzUtil.toId('t', tenantAlias, ShortId.generate());
                                        var externalId = 'OA-1';
                                        var publicationId = ticket.publication.id;
                                        var createdBy = camUser.user.id;
                                        TicketsDAO.createTicket(ticketId, externalId, publicationId, tenantAlias, createdBy, function(err, ticket) {
                                            assert.strictEqual(err.code, 400);
                                            assert.ok(!ticket);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            describe('verify permissions', function() {

                /**
                 * Test that verifies that creating tickets is only allowed for authorized users
                 */
                it('verify that only authorized users are allowed to create tickets', function(callback) {
                    TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, coenegoUser, simongUser) {
                        assert.ok(!err);

                        // Create a new content item
                        RestAPI.Content.createFile(camAdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                            assert.ok(!err);

                            // Creating a ticket with an anonymous user should throw an error
                            var publication = _.extend(generatePublicationData());
                            TicketsRestAPI.createTicket(anonymousRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': publication}, function(err, ticket) {
                                assert.strictEqual(err.code, 401);

                                // Creating a ticket with a regular user who is NOT the creator of the content item should throw an error
                                TicketsRestAPI.createTicket(simongUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': publication}, function(err, ticket) {
                                    assert.strictEqual(err.code, 401);

                                    // Creating a ticket with a admin from another tenant than the tenant of the content item should thrown an error
                                    TicketsRestAPI.createTicket(gtAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': publication}, function(err, ticket) {
                                        assert.strictEqual(err.code, 401);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });

                /**
                 * Test that verifies that creating a ticket by the user who created the content item is successful
                 */
                it('verify that creating a ticket with the user who created the content item is successful', function(callback) {
                    TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, coenegoUser, simongUser) {
                        assert.ok(!err);

                        // Create a new content item
                        RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                            assert.ok(!err);

                            // Creating a ticket with the user who created the content item should be successful
                            var publication = generatePublicationData();
                            TicketsRestAPI.createTicket(coenegoUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': publication}, function(err, ticket) {

                                assert.ok(!err);
                                isValidTicket(ticket);
                                return callback();
                            });
                        });
                    });
                });

                /**
                 * Test that verifies that creating a ticket with the admin of the content item's tenant is successful
                 */
                it('verify that creating a ticket with the admin of the content item\'s tenant is successful', function(callback) {
                    TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, coenegoUser, simongUser) {
                        assert.ok(!err);

                        // Create a new content item
                        RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                            assert.ok(!err);

                            // Creating a ticket with the tenant admin should be successful
                            TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData()}, function(err, ticket) {
                                assert.ok(!err);
                                isValidTicket(ticket);
                                return callback();
                            });
                        });
                    });
                });

                /**
                 * Test that verifies that creating a ticket with the global admin is successful
                 */
                it('verify that creating a ticket with the global admin is successful', function(callback) {
                    TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, coenegoUser, simongUser) {
                        assert.ok(!err);

                        RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                            assert.ok(!err);

                            // Creating a ticket with the global admin should be successful
                            RestAPI.Admin.loginOnTenant(globalAdminRestContext, 'localhost', null, function(err, ctx) {
                                assert.ok(!err);
                                TicketsRestAPI.createTicket(ctx, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData()}, function(err, ticket) {
                                    assert.ok(!err);
                                    isValidTicket(ticket);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });

            describe('generate external ID\'s', function() {

                /**
                 * Test that verifies that attempting to create a ticket when the key is already locked results in an error
                 */
                it('verify that creating a ticket when the key is already locked results in an error', function(callback) {
                    var tenantAlias = TestsUtil.generateRandomText(1);
                    TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenantAdminRestContext) {
                        assert.ok(!err);

                        // Create a new content item
                        RestAPI.Content.createFile(tenantAdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                            assert.ok(!err);

                            // Lock the key to create a new ticket
                            var key = util.format('oae-tickets:counter:%s', tenantAlias);
                            Locking.acquire(key, 15, function(err, lockToken) {
                                assert.ok(!err);
                                assert.ok(lockToken);

                                // Creating a ticket while the key is locked should result in an error
                                TicketsRestAPI.createTicket(tenantAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData()}, function(err, ticket) {
                                    assert.strictEqual(err.code, 400);

                                    // Unlock the key again
                                    Locking.release(key, lockToken, function(err, hadLock) {
                                        assert.ok(!err);
                                        assert.ok(hadLock);

                                        // Creating a ticket while the key is unlocked should be successful
                                        TicketsRestAPI.createTicket(tenantAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData()}, function(err, ticket) {
                                            assert.ok(!err);
                                            isValidTicket(ticket);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });

                /**
                 * Test that verifies that the locking key is available after the ticket was created
                 */
                it('verify that the locking key is available again after the ticket was created', function(callback) {
                    var tenantAlias = TestsUtil.generateRandomText(1);
                    TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenantAdminRestContext) {
                        assert.ok(!err);

                        // Create a new content item
                        RestAPI.Content.createFile(tenantAdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                            assert.ok(!err);

                            // Creating a ticket while the key is locked should result in an error
                            TicketsRestAPI.createTicket(tenantAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData()}, function(err, ticket) {
                                assert.ok(!err);
                                isValidTicket(ticket);

                                // Locking the key should be possible since it's release when a ticket is created
                                var key = util.format('oae-tickets:counter:%s', tenantAlias);
                                Locking.acquire(key, 15, function(err, lockToken) {
                                    assert.ok(!err);
                                    assert.ok(lockToken);
                                    return callback();
                                });
                            });
                        });
                    });
                });

                /**
                 * Test that verifies that creating tickets on different tenants doesn't cause conflits with the external ID's
                 */
                it('verify creating tickets on different tenants doesn\'t cause conflicts with the external ID\'s', function(callback) {

                    // Create a first tenant
                    var tenantAlias = TestsUtil.generateRandomText(1);
                    TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenant1AdminRestContext) {
                        assert.ok(!err);

                        // Create a content item in the first tenant
                        RestAPI.Content.createFile(tenant1AdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                            assert.ok(!err);

                            // Create a new ticket in the first tenant
                            TicketsRestAPI.createTicket(tenant1AdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData()}, function(err, ticket) {
                                assert.ok(!err);
                                isValidTicket(ticket);
                                assert.strictEqual(ticket.externalId, 'OA-1');

                                // Create a second tenant
                                tenantAlias = TestsUtil.generateRandomText(1);
                                TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenant2AdminRestContext) {
                                    assert.ok(!err);

                                    // Create a content item in the second tenant
                                    RestAPI.Content.createFile(tenant2AdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                                        assert.ok(!err);

                                        // Create a new ticket in the second tenant
                                        TicketsRestAPI.createTicket(tenant2AdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData()}, function(err, ticket) {
                                            assert.ok(!err);
                                            isValidTicket(ticket);
                                            assert.strictEqual(ticket.externalId, 'OA-1');

                                            // Create a content item in the first tenant
                                            RestAPI.Content.createFile(tenant1AdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                                                assert.ok(!err);

                                                // Create a new ticket in the first tenant
                                                TicketsRestAPI.createTicket(tenant1AdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData()}, function(err, ticket) {
                                                    assert.ok(!err);
                                                    isValidTicket(ticket);
                                                    assert.strictEqual(ticket.externalId, 'OA-2');

                                                    // Create a third tenant
                                                    tenantAlias = TestsUtil.generateRandomText(1);
                                                    TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenant3AdminRestContext) {
                                                        assert.ok(!err);

                                                        // Create a content item in the third tenant
                                                        RestAPI.Content.createFile(tenant3AdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                                                            assert.ok(!err);

                                                            // Create a new ticket in the third tenant
                                                            TicketsRestAPI.createTicket(tenant3AdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                                                                assert.ok(!err);
                                                                isValidTicket(ticket);
                                                                assert.strictEqual(ticket.externalId, 'OA-1');
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('#deleteTicket()', function() {

            describe('verify parameters', function() {

                /**
                 * Test that verifies if a valid ticket ID is specified
                 */
                it('verify ticketId', function(callback) {

                    // Delete a ticket by a malformed ID
                    TicketsRestAPI.deleteTicket(camAdminRestContext, 'invalid_ticket_id', function(err) {
                        assert.strictEqual(err.code, 400);

                        // Delete a ticket by a malformed ID
                        TicketsRestAPI.deleteTicket(camAdminRestContext, 't:camtest', function(err) {
                            assert.strictEqual(err.code, 400);

                            // Delete a ticket by a malformed ID
                            TicketsRestAPI.deleteTicket(camAdminRestContext, coenegoUser.user.id, function(err) {
                                assert.strictEqual(err.code, 400);
                                return callback();
                            });
                        });
                    });
                });
            });

            describe('verify permissions', function() {

                /**
                 * Test that verifies that unauthorized users are not allowed to delete a ticket
                 */
                it('verify that unauthorized users are not allowed to delete a ticket', function(callback) {

                    // Create a new content item
                    RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new ticket in the first tenant
                        TicketsRestAPI.createTicket(coenegoUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                            assert.ok(!err);
                            isValidTicket(ticket);

                            // Verify that an anonymous user is not allowed to delete a ticket
                            TicketsRestAPI.deleteTicket(anonymousRestContext, ticket.ticketId, function(err) {
                                assert.strictEqual(err.code, 401);

                                // Verify that a random, registered user is not allowed to delete a ticket
                                TicketsRestAPI.deleteTicket(halUser.restContext, ticket.ticketId, function(err) {
                                    assert.strictEqual(err.code, 401);

                                    // Verify that tenant admins from another tenant are not allowed to delete a ticket
                                    TicketsRestAPI.deleteTicket(gtAdminRestContext, ticket.ticketId, function(err) {
                                        assert.strictEqual(err.code, 401);

                                        // Verify that the regular user who created the ticket is not allowed to delete a ticket
                                        TicketsRestAPI.deleteTicket(coenegoUser.restContext, ticket.ticketId, function(err) {
                                            assert.strictEqual(err.code, 401);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });

                /**
                 * Test that verifies that tenant admins are always allowed to delete a ticket
                 */
                it('verify that the tenant admin is always allowed to delete a ticket', function(callback) {

                    // Create a new content item
                    RestAPI.Content.createFile(camAdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new ticket in the first tenant
                        TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                            assert.ok(!err);
                            isValidTicket(ticket);

                            // Verify that tenant admins are allowed to delete a ticket
                            TicketsRestAPI.deleteTicket(camAdminRestContext, ticket.ticketId, function(err, deletedTicket) {
                                assert.ok(!err);
                                assert.ok(deletedTicket);
                                assert.strictEqual(deletedTicket.ticketId, ticket.ticketId);
                                return callback();
                            });
                        });
                    });
                });

                /**
                 * Test that verifies that global admins are always allowed to delete a ticket
                 */
                it('verify that global admins are always allowed to delete a ticket', function(callback) {

                    // Create a new content item
                    RestAPI.Content.createFile(camAdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new ticket in the first tenant
                        TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                            assert.ok(!err);
                            isValidTicket(ticket);

                            // Verify that global admins are allowed to delete a ticket
                            RestAPI.Admin.loginOnTenant(globalAdminRestContext, 'localhost', null, function(err, ctx) {
                                assert.ok(!err);
                                TicketsRestAPI.deleteTicket(ctx, ticket.ticketId, function(err, deletedTicket) {
                                    assert.ok(!err);
                                    assert.ok(deletedTicket);
                                    assert.strictEqual(deletedTicket.ticketId, ticket.ticketId);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });

            describe('deleting tickets', function() {

                /**
                 * Test that verifies that only existing tickets can be deleted
                 */
                it('verify that only existing tickets can be deleted', function(callback) {

                    // Verify that deleting an unexisting ticket results in an error
                    TicketsRestAPI.deleteTicket(camAdminRestContext, 't:camtest:0123456789', function(err) {
                        assert.strictEqual(err.code, 404);

                        // Create a new content item
                        RestAPI.Content.createFile(camAdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                            assert.ok(!err);

                            // Create a new ticket in the first tenant
                            TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                                assert.ok(!err);
                                isValidTicket(ticket);

                                // Verify that deleting an existing ticket doesn\'t result in an error
                                TicketsRestAPI.deleteTicket(camAdminRestContext, ticket.ticketId, function(err, deletedTicket) {
                                    assert.ok(!err);
                                    assert.ok(deletedTicket);
                                    assert.strictEqual(deletedTicket.ticketId, ticket.ticketId);
                                    return callback();
                                });
                            });
                        });
                    });
                });

                /**
                 * Test that verifies that a ticket has been successfully deleted
                 */
                it('verify that deleting a ticket is successful', function(callback) {

                    // Create a new content item
                    RestAPI.Content.createFile(camAdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new ticket in the first tenant
                        TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                            assert.ok(!err);
                            isValidTicket(ticket);

                            // Verify that deleting an unexisting ticket results in an error
                            TicketsRestAPI.deleteTicket(camAdminRestContext, ticket.ticketId, function(err, deletedTicket) {
                                assert.ok(!err);
                                assert.ok(deletedTicket);
                                assert.strictEqual(deletedTicket.ticketId, ticket.ticketId);

                                // Requesting the deleted ticket should result in an error
                                TicketsRestAPI.getTicket(camAdminRestContext, ticket.ticketId, function(err, ticket) {
                                    assert.strictEqual(err.code, 404);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('#getTicket()', function() {

            describe('verify parameters', function() {

                /**
                 * Test that verifies that a valid ticket ID is specified
                 */
                it('verify ticketId', function(callback) {

                    // Create a new content item
                    RestAPI.Content.createFile(camAdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new ticket in the first tenant
                        TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                            assert.ok(!err);
                            assert.ok(ticket);
                            isValidTicket(ticket);
                            var createdTicket = ticket;

                            // Requesting a ticket with an empty identifier should return an error
                            TicketsRestAPI.getTicket(camAdminRestContext, null, function(err, ticket) {
                                assert.strictEqual(err.code, 404);
                                assert.ok(!ticket);

                                // Requesting a ticket with a mallformed identifier should return an error
                                TicketsRestAPI.getTicket(camAdminRestContext, 'invalid_ticket_id', function(err, ticket) {
                                    assert.strictEqual(err.code, 400);
                                    assert.ok(!ticket);

                                    // Requesting a ticket with a invalid identifier datatype should return an error
                                    TicketsRestAPI.getTicket(camAdminRestContext, {'ticketId': 't:camtest:0123456789'}, function(err, ticket) {
                                        assert.strictEqual(err.code, 400);
                                        assert.ok(!ticket);

                                        // Requesting a ticket with an unexisting identifier should return an error
                                        TicketsRestAPI.getTicket(camAdminRestContext, 't:camtest:0123456789', function(err, ticket) {
                                            assert.strictEqual(err.code, 404);
                                            assert.ok(!ticket);

                                            // Requesting a ticket with a valid, existing identifier should return a ticket
                                            TicketsRestAPI.getTicket(camAdminRestContext, createdTicket.ticketId, function(err, ticket) {
                                                assert.ok(!err);
                                                assert.ok(ticket);
                                                isValidTicket(ticket);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            describe('verify permissions', function() {

                /**
                 * Test that verifies that unauthorized users are not allowed to request tickets
                 */
                it('verify that unauthorized users are not allowed to request tickets', function(callback) {

                    // Create a new content item
                    RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new ticket in the first tenant
                        TicketsRestAPI.createTicket(coenegoUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                            assert.ok(!err);
                            assert.ok(ticket);
                            isValidTicket(ticket);

                            // Verify that an anonymous user is not allowed to request a ticket
                            TicketsRestAPI.getTicket(anonymousRestContext, ticket.ticketId, function(err) {
                                assert.strictEqual(err.code, 401);

                                // Verify that a random, registered user is not allowed to request a ticket
                                TicketsRestAPI.getTicket(halUser.restContext, ticket.ticketId, function(err) {
                                    assert.strictEqual(err.code, 401);

                                    // Verify that tenant admins from another tenant are not allowed to request a ticket
                                    TicketsRestAPI.getTicket(gtAdminRestContext, ticket.ticketId, function(err) {
                                        assert.strictEqual(err.code, 401);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });

                /**
                 * Test that verifies that users are allowed to request the ticket they created
                 */
                it('verify that users are allowed to request the tickets they created', function(callback) {

                    // Create a new content item
                    RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new ticket in the first tenant
                        TicketsRestAPI.createTicket(coenegoUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                            assert.ok(!err);
                            isValidTicket(ticket);

                            // Verify that the regular user who created the ticket is allowed to request the ticket
                            TicketsRestAPI.getTicket(coenegoUser.restContext, ticket.ticketId, function(err, ticket) {
                                assert.ok(!err);
                                assert.ok(ticket);
                                isValidTicket(ticket);
                                return callback();
                            });
                        });
                    });
                });

                /**
                 * Test that verifies that tenant admins are allowed to request tickets from their own tenant
                 */
                it('verify that tenant admins are allowed to request tickets from their own tenant', function(callback) {

                    // Create a new content item
                    RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new ticket in the first tenant
                        TicketsRestAPI.createTicket(coenegoUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                            assert.ok(!err);
                            isValidTicket(ticket);

                            // Verify that the regular user who created the ticket is allowed to request the ticket
                            TicketsRestAPI.getTicket(camAdminRestContext, ticket.ticketId, function(err, ticket) {
                                assert.ok(!err);
                                assert.ok(ticket);
                                isValidTicket(ticket);
                                return callback();
                            });
                        });
                    });
                });

                /**
                 * Test that verifies that global admins are allowed to request tickets
                 */
                it('verify that global admins are allowed to request tickets', function(callback) {

                    // Create a new content item
                    RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new ticket in the first tenant
                        TicketsRestAPI.createTicket(coenegoUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                            assert.ok(!err);
                            isValidTicket(ticket);

                            // Verify that the regular user who created the ticket is allowed to request the ticket
                            RestAPI.Admin.loginOnTenant(globalAdminRestContext, 'localhost', null, function(err, ctx) {
                                assert.ok(!err);
                                TicketsRestAPI.getTicket(ctx, ticket.ticketId, function(err, ticket) {
                                    assert.ok(!err);
                                    assert.ok(ticket);
                                    isValidTicket(ticket);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('#updateTicket', function() {

            describe('verify parameters', function() {

                /**
                 * Test that verifies if a valid ticket ID is specified
                 */
                it('verify ticketId', function(callback) {

                    // Updating a ticket while passing in an emtpy ticket ID should throw an error
                    TicketsRestAPI.updateTicket(camAdminRestContext, null, {}, function(err, ticket) {
                        assert.strictEqual(err.code, 404);

                        // Updating a ticket while passing in a malformed ticket ID should throw an error
                        TicketsRestAPI.updateTicket(camAdminRestContext, 'malformed_ticket_id', {}, function(err, ticket) {
                            assert.strictEqual(err.code, 400);

                            // Updating an unexisting ticket should throw an error
                            TicketsRestAPI.updateTicket(camAdminRestContext, 't:camtest:0123456789', {}, function(err, ticket) {
                                assert.strictEqual(err.code, 404);
                                return callback();
                            });
                        });
                    });
                });

                /**
                 * Test that verifies that valid update parameters have been specified
                 */
                it('verify update parameters', function(callback) {

                    // Create a new content item
                    RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new ticket in the first tenant
                        TicketsRestAPI.createTicket(coenegoUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                            assert.ok(!err);
                            isValidTicket(ticket);
                            var createdTicket = ticket;

                            // Updating a ticket while passing in empty update parameters object should throw an error
                            TicketsRestAPI.updateTicket(camAdminRestContext, createdTicket.id, null, function(err, ticket) {
                                assert.strictEqual(err.code, 400);

                                // Updating a ticket while passing in empty update parameters object should throw an error
                                TicketsRestAPI.updateTicket(camAdminRestContext, createdTicket.id, {}, function(err, ticket) {
                                    assert.strictEqual(err.code, 400);

                                    // Updating a ticket while passing in invalid update parameters should throw an error
                                    TicketsRestAPI.updateTicket(camAdminRestContext, createdTicket.id, {'foo': 'bar'}, function(err, ticket) {
                                        assert.strictEqual(err.code, 400);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });

            describe('verify permissions', function() {

                /**
                 * Test that verifies that unauthorized users are not allowed to update tickets
                 */
                it('verify that unauthorized users are not allowed to update tickets', function(callback) {

                    // Create a new content item
                    RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new ticket in the first tenant
                        TicketsRestAPI.createTicket(coenegoUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                            assert.ok(!err);
                            isValidTicket(ticket);
                            var createdTicket = ticket;

                            // Anonymous users shouldn't be allowed to update tickets
                            TicketsRestAPI.updateTicket(anonymousRestContext, createdTicket.ticketId, {'status': TicketsConstants.statusses.CLOSED}, function(err, ticket) {
                                assert.ok(err);
                                assert.ok(!ticket);

                                // Non-affiliated users shouldn't be allowed to update tickets
                                TicketsRestAPI.updateTicket(halUser.restContext, createdTicket.ticketId, {'status': TicketsConstants.statusses.CLOSED}, function(err, ticket) {
                                    assert.ok(err);
                                    assert.ok(!ticket);

                                    // The user who created the ticket shouldn't be allowed to update the ticket
                                    TicketsRestAPI.updateTicket(coenegoUser.restContext, createdTicket.ticketId, {'status': TicketsConstants.statusses.CLOSED}, function(err, ticket) {
                                        assert.ok(err);
                                        assert.ok(!ticket);

                                        // Admins from other tenants shouldn't be allowed to update the ticket
                                        TicketsRestAPI.updateTicket(gtAdminRestContext, createdTicket.ticketId, {'status': TicketsConstants.statusses.CLOSED}, function(err, ticket) {
                                            assert.ok(err);
                                            assert.ok(!ticket);

                                            // Tenant admins should always be allowed to update tickets
                                            TicketsRestAPI.updateTicket(camAdminRestContext, createdTicket.ticketId, {'status': TicketsConstants.statusses.CLOSED}, function(err, ticket) {
                                                assert.ok(!err);
                                                assert.ok(ticket);

                                                // Global admins should always be allowed to update tickets
                                                RestAPI.Admin.loginOnTenant(globalAdminRestContext, 'localhost', null, function(err, ctx) {
                                                    assert.ok(!err);
                                                    TicketsRestAPI.updateTicket(ctx, createdTicket.ticketId, {'status': TicketsConstants.statusses.CLOSED}, function(err, ticket) {
                                                        assert.ok(!err);
                                                        assert.ok(ticket);
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            describe('updating tickets', function() {

                /**
                 * Test that verifies that a ticket can be updated successfully
                 */
                it('verify that updating a ticket is successful', function(callback) {

                    // Create a new content item
                    RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a new ticket in the first tenant
                        TicketsRestAPI.createTicket(coenegoUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                            assert.ok(!err);
                            isValidTicket(ticket);
                            var createdTicket = ticket;

                            // Update the ticket
                            TicketsRestAPI.updateTicket(camAdminRestContext, createdTicket.ticketId, {'status': TicketsConstants.statusses.CLOSED}, function(err, ticket) {
                                assert.ok(!err);
                                assert.ok(ticket);
                                assert.strictEqual(ticket.status, TicketsConstants.statusses.CLOSED);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Tickets - Publications', function() {

        describe('#createTicket()', function() {

            /**
             * Test that verifies that creating a ticket also creates a publication
             */
            it('verify that creating a ticket also creates a publication', function(callback) {

                // Create a new content item
                RestAPI.Content.createFile(camAdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                    assert.ok(!err);

                    // Create a new ticket
                    var publication = generatePublicationData();
                    TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': publication}, function(err, ticket) {
                        assert.ok(!err);
                        assert.ok(ticket.publication);
                        assert.strictEqual(ticket.publication.linkedContentId, content.id);
                        isCorrespondingPublication(publication, ticket);
                        return callback();
                    });
                });
            });
        });

        describe('#deleteTicket', function() {

            /**
             * Test that verifies that a publication is no longer decorated with a ticket when the ticket was deleted
             */
            it('verify that a publication is no longer decorated with a ticket', function(callback) {

                // Create a new content item
                RestAPI.Content.createFile(camAdminRestContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                    assert.ok(!err);

                    // Create a new ticket in the first tenant
                    TicketsRestAPI.createTicket(camAdminRestContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                        assert.ok(!err);
                        isValidTicket(ticket);
                        var publicationId = ticket.publication.id;

                        // Verify that the requested publication is decorated with its ticket
                        PublicationsRestAPI.getPublication(camAdminRestContext, publicationId, function(err, publication) {
                            assert.ok(!err);
                            assert.ok(publication);
                            assert.ok(publication.ticket);
                            isCorrespondingTicket(ticket, publication);

                            // Delete the ticket
                            TicketsRestAPI.deleteTicket(camAdminRestContext, ticket.ticketId, function(err, deletedTicket) {
                                assert.ok(!err);
                                assert.ok(deletedTicket);
                                assert.strictEqual(deletedTicket.ticketId, ticket.ticketId);

                                // Requesting the deleted ticket should result in an error
                                TicketsRestAPI.getTicket(camAdminRestContext, ticket.ticketId, function(err, ticket) {
                                    assert.strictEqual(err.code, 404);

                                    // Verify that the requested publication is decorated WITHOUT a ticket
                                    PublicationsRestAPI.getPublication(camAdminRestContext, publicationId, function(err, publication) {
                                        assert.ok(!err);
                                        assert.ok(publication);
                                        assert.ok(!publication.ticket);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('#getPublicationById()', function() {

            /**
             * Test that verifies that a requested publication is decorated with its corresponding ticket
             */
            it('verify that requesting a publication comes with its corresponding ticket', function(callback) {

                // Create a new content item
                RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                    assert.ok(!err);

                    // Create a new ticket
                    TicketsRestAPI.createTicket(coenegoUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                        assert.ok(!err);
                        assert.ok(ticket.publication);
                        assert.strictEqual(ticket.publication.linkedContentId, content.id);

                        // Requesting the publication as an anonymous user should come without a ticket
                        PublicationsRestAPI.getPublication(coenegoUser.restContext, ticket.publication.id, function(err, publication) {
                            assert.ok(!err);
                            assert.ok(publication);
                            assert.ok(publication.ticket);
                            isCorrespondingTicket(ticket, publication);
                            return callback();
                        });
                    });
                });
            });

            /**
             * Test that verifies that requesting a publication only comes with its corresponding ticket for authorized users
             */
            it('verify that requesting a publication comes with its corresponding ticket for authorized users only', function(callback) {

                // Create a new content item
                RestAPI.Content.createFile(coenegoUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                    assert.ok(!err);

                    // Create a new ticket
                    TicketsRestAPI.createTicket(coenegoUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': generatePublicationData}, function(err, ticket) {
                        assert.ok(!err);
                        assert.ok(ticket.publication);
                        assert.strictEqual(ticket.publication.linkedContentId, content.id);

                        // Requesting the publication as an anonymous user should come without a ticket
                        PublicationsRestAPI.getPublication(anonymousRestContext, ticket.publication.id, function(err, publication) {
                            assert.ok(!err);
                            assert.ok(publication);
                            assert.ok(!publication.ticket);

                            // Requesting the publication as an regular user, who didn't create the ticket, should come without a ticket
                            PublicationsRestAPI.getPublication(halUser.restContext, ticket.publication.id, function(err, publication) {
                                assert.ok(!err);
                                assert.ok(publication);
                                assert.ok(!publication.ticket);

                                // Requesting the publication as a tenant admin from another tenant, should come wihout a ticket
                                PublicationsRestAPI.getPublication(gtAdminRestContext, ticket.publication.id, function(err, publication) {
                                    assert.ok(!err);
                                    assert.ok(publication);
                                    assert.ok(!publication.ticket);

                                    // Requesting the publication as regular user, who created the ticket, should come with a ticket
                                    PublicationsRestAPI.getPublication(coenegoUser.restContext, ticket.publication.id, function(err, publication) {
                                        assert.ok(!err);
                                        assert.ok(publication);
                                        assert.ok(publication.ticket);
                                        isCorrespondingTicket(ticket, publication);

                                        // Requesting the publication as a tenant admin where the ticket was created in, should come with a ticket
                                        PublicationsRestAPI.getPublication(camAdminRestContext, ticket.publication.id, function(err, publication) {
                                            assert.ok(!err);
                                            assert.ok(publication);
                                            assert.ok(publication.ticket);
                                            isCorrespondingTicket(ticket, publication);

                                            // Requesting the publication as a global admin should come with a ticket
                                            RestAPI.Admin.loginOnTenant(globalAdminRestContext, 'localhost', null, function(err, ctx) {
                                                assert.ok(!err);
                                                PublicationsRestAPI.getPublication(ctx, ticket.publication.id, function(err, publication) {
                                                    assert.ok(!err);
                                                    assert.ok(publication);
                                                    assert.ok(publication.ticket);
                                                    isCorrespondingTicket(ticket, publication);
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('#getPublicationsByAuthor()', function() {

            /**
             * Test that verifies that requesting a set of publications come with their corresponding ticket
             */
            it('verify that requesting a set of publications come with their corresponding ticket', function(callback) {

                // Create a new user
                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, camUser) {
                    assert.ok(!err);

                    // Store the created tickets
                    var createdTickets = {};

                    // Create a new content item
                    RestAPI.Content.createFile(camUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a first ticket
                        var publication = _.extend(generatePublicationData(), {'authors': [camUser.user.id, 'author B', 'author C']});
                        TicketsRestAPI.createTicket(camUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': publication}, function(err, ticket) {
                            assert.ok(!err);
                            assert.ok(ticket.publication);
                            assert.strictEqual(ticket.publication.linkedContentId, content.id);
                            createdTickets[ticket.ticketId] = ticket;

                            // Create a new content item
                            RestAPI.Content.createFile(camUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                                assert.ok(!err);

                                // Create a second ticket
                                publication = _.extend(generatePublicationData(), {'authors': ['author A', 'author B']});
                                TicketsRestAPI.createTicket(camUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': publication}, function(err, ticket) {
                                    assert.ok(!err);
                                    assert.ok(ticket.publication);
                                    assert.strictEqual(ticket.publication.linkedContentId, content.id);
                                    createdTickets[ticket.ticketId] = ticket;

                                    // Create a new content item
                                    RestAPI.Content.createFile(camUser.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                                        assert.ok(!err);

                                        // Create a third ticket
                                        publication = _.extend(generatePublicationData(), {'authors': [camUser.user.id, 'author B', 'author C']});
                                        TicketsRestAPI.createTicket(camUser.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': publication}, function(err, ticket) {
                                            assert.ok(!err);
                                            assert.ok(ticket.publication);
                                            assert.strictEqual(ticket.publication.linkedContentId, content.id);
                                            createdTickets[ticket.ticketId] = ticket;

                                            // Request the publication
                                            PublicationsRestAPI.getPublicationsByAuthor(camAdminRestContext, camUser.user.id, null, null, function(err, data) {
                                                assert.ok(!err);
                                                assert.strictEqual(data.results.length, 2);
                                                _.each(data.results, function(publication) {
                                                    assert.ok(createdTickets[publication.ticket.ticketId]);
                                                });
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that requesting a set of publications come with their corresponding ticket for authorized users only
             */
            it('verify that requesting a set of publications come with their corresponding ticket for authorized users only', function(callback) {

                // Create some new users
                TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, camUserA, camUserB) {
                    assert.ok(!err);

                    // Create a new content item
                    RestAPI.Content.createFile(camUserA.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a first ticket
                        var publication = _.extend(generatePublicationData(), {'authors': [camUserA.user.id, 'author B', 'author C']});
                        TicketsRestAPI.createTicket(camUserA.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': publication}, function(err, ticket) {
                            assert.ok(!err);
                            assert.ok(ticket.publication);
                            assert.strictEqual(ticket.publication.linkedContentId, content.id);

                            // Requesting the publication as an anonymous user should come without a ticket
                            PublicationsRestAPI.getPublicationsByAuthor(anonymousRestContext, camUserA.user.id, null, null, function(err, data) {
                                assert.ok(!err);
                                assert.strictEqual(data.results.length, 1);
                                assert.ok(!data.results[0].ticket);

                                // Requesting the publication as an regular user, who didn't create the ticket, should come without a ticket
                                PublicationsRestAPI.getPublicationsByAuthor(camUserB.restContext, camUserA.user.id, null, null, function(err, data) {
                                    assert.ok(!err);
                                    assert.strictEqual(data.results.length, 1);
                                    assert.ok(!data.results[0].ticket);

                                    // Requesting the publication as a tenant admin from another tenant, should come wihout a ticket
                                    PublicationsRestAPI.getPublicationsByAuthor(gtAdminRestContext, camUserA.user.id, null, null, function(err, data) {
                                        assert.ok(!err);
                                        assert.strictEqual(data.results.length, 1);
                                        assert.ok(!data.results[0].ticket);

                                        // Requesting the publication as regular user, who created the ticket, should come with a ticket
                                        PublicationsRestAPI.getPublicationsByAuthor(camUserA.restContext, camUserA.user.id, null, null, function(err, data) {
                                            assert.ok(!err);
                                            assert.strictEqual(data.results.length, 1);
                                            assert.ok(data.results[0].ticket);

                                            // Requesting the publication as a tenant admin where the ticket was created in, should come with a ticket
                                            PublicationsRestAPI.getPublicationsByAuthor(camAdminRestContext, camUserA.user.id, null, null, function(err, data) {
                                                assert.ok(!err);
                                                assert.strictEqual(data.results.length, 1);
                                                assert.ok(data.results[0].ticket);

                                                // Requesting the publication as a global admin should come with a ticket
                                                RestAPI.Admin.loginOnTenant(globalAdminRestContext, 'localhost', null, function(err, ctx) {
                                                    assert.ok(!err);
                                                    PublicationsRestAPI.getPublicationsByAuthor(ctx, camUserA.user.id, null, null, function(err, data) {
                                                        assert.ok(!err);
                                                        assert.strictEqual(data.results.length, 1);
                                                        assert.ok(data.results[0].ticket);
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('#getPublicationsByCreator()', function() {

            /**
             * Test that verifies that requesting a set of publications come with their corresponding ticket
             */
            it('verify that requesting a set of publications come with their corresponding ticket', function(callback) {

                // Create some new users
                TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, camUserA, camUserB) {
                    assert.ok(!err);

                    // Create a new content item
                    RestAPI.Content.createFile(camUserA.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a first ticket with camUserA
                        var publication = generatePublicationData();
                        TicketsRestAPI.createTicket(camUserA.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': publication}, function(err, ticket) {
                            assert.ok(!err);
                            assert.ok(ticket.publication);
                            assert.strictEqual(ticket.publication.linkedContentId, content.id);
                            var createdTicket = ticket;

                            // Request the publications that camUserA created
                            PublicationsRestAPI.getPublicationsByCreator(camAdminRestContext, camUserA.user.id, null, null, function(err, data) {
                                assert.ok(!err);
                                assert.strictEqual(data.results.length, 1);
                                _.each(data.results, function(publication) {
                                    isCorrespondingTicket(createdTicket, publication);
                                });
                                return callback();
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that requesting a set of publications come with their corresponding ticket for authorized users only
             */
            it('verify that requesting a set of publications come with their corresponding ticket for authorized users only', function(callback) {

                // Create some new users
                TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, camUserA, camUserB) {
                    assert.ok(!err);

                    // Create a new content item
                    RestAPI.Content.createFile(camUserA.restContext, 'Some file', null, 'public', getFileStream, null, null, function(err, content) {
                        assert.ok(!err);

                        // Create a first ticket with camUserA
                        var publication = generatePublicationData();
                        TicketsRestAPI.createTicket(camUserA.restContext, {'contentId': content.id, 'sourceIds': generateRandomSourceId, 'publication': publication}, function(err, ticket) {
                            assert.ok(!err);
                            assert.ok(ticket.publication);
                            assert.strictEqual(ticket.publication.linkedContentId, content.id);
                            var createdTicket = ticket;

                            // Requesting the publication as an anonymous user should come without a ticket
                            PublicationsRestAPI.getPublicationsByCreator(anonymousRestContext, camUserA.user.id, null, null, function(err, data) {
                                assert.ok(!err);
                                assert.strictEqual(data.results.length, 1);
                                _.each(data.results, function(publication) {
                                    assert.ok(!publication.ticket);
                                });

                                // Requesting the publication as an regular user, who didn't create the ticket, should come without a ticket
                                PublicationsRestAPI.getPublicationsByCreator(camUserB.restContext, camUserA.user.id, null, null, function(err, data) {
                                    assert.ok(!err);
                                    assert.strictEqual(data.results.length, 1);
                                    _.each(data.results, function(publication) {
                                        assert.ok(!publication.ticket);
                                    });

                                    // Requesting the publication as a tenant admin from another tenant, should come wihout a ticket
                                    PublicationsRestAPI.getPublicationsByCreator(gtAdminRestContext, camUserA.user.id, null, null, function(err, data) {
                                        assert.ok(!err);
                                        assert.strictEqual(data.results.length, 1);
                                        _.each(data.results, function(publication) {
                                            assert.ok(!publication.ticket);
                                        });

                                        // Requesting the publication as regular user, who created the ticket, should come with a ticket
                                        PublicationsRestAPI.getPublicationsByCreator(camUserA.restContext, camUserA.user.id, null, null, function(err, data) {
                                            assert.ok(!err);
                                            assert.strictEqual(data.results.length, 1);
                                            _.each(data.results, function(publication) {
                                                isCorrespondingTicket(createdTicket, publication);
                                            });

                                            // Requesting the publication as a tenant admin where the ticket was created in, should come with a ticket
                                            PublicationsRestAPI.getPublicationsByCreator(camAdminRestContext, camUserA.user.id, null, null, function(err, data) {
                                                assert.ok(!err);
                                                assert.strictEqual(data.results.length, 1);
                                                _.each(data.results, function(publication) {
                                                    isCorrespondingTicket(createdTicket, publication);
                                                });

                                                // Requesting the publication as a global admin should come with a ticket
                                                RestAPI.Admin.loginOnTenant(globalAdminRestContext, 'localhost', null, function(err, ctx) {
                                                    assert.ok(!err);
                                                    PublicationsRestAPI.getPublicationsByCreator(ctx, camUserA.user.id, null, null, function(err, data) {
                                                        assert.ok(!err);
                                                        assert.strictEqual(data.results.length, 1);
                                                        _.each(data.results, function(publication) {
                                                            isCorrespondingTicket(createdTicket, publication);
                                                        });
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
